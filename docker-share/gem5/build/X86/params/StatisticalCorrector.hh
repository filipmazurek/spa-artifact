/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_hh.py:235
 */

#ifndef __PARAMS__StatisticalCorrector__
#define __PARAMS__StatisticalCorrector__

namespace gem5 {
namespace branch_prediction {
class StatisticalCorrector;
} // namespace branch_prediction
} // namespace gem5
#include <cstddef>
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"

#include "params/SimObject.hh"

namespace gem5
{
struct StatisticalCorrectorParams
    : public SimObjectParams
{
    int bwWeightInitValue;
    std::vector< int > bwm;
    unsigned bwnb;
    unsigned chooserConfWidth;
    unsigned extraWeightsWidth;
    int iWeightInitValue;
    std::vector< int > im;
    unsigned inb;
    int initialUpdateThresholdValue;
    int lWeightInitValue;
    std::vector< int > lm;
    unsigned lnb;
    unsigned logBias;
    unsigned logBwnb;
    unsigned logInb;
    unsigned logLnb;
    unsigned logSizeUp;
    unsigned numEntriesFirstLocalHistories;
    unsigned pUpdateThresholdWidth;
    unsigned scCountersWidth;
    unsigned updateThresholdWidth;
};

} // namespace gem5

#endif // __PARAMS__StatisticalCorrector__
