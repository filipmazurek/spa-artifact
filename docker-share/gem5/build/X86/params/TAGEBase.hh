/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_hh.py:235
 */

#ifndef __PARAMS__TAGEBase__
#define __PARAMS__TAGEBase__

namespace gem5 {
namespace branch_prediction {
class TAGEBase;
} // namespace branch_prediction
} // namespace gem5
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <vector>
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include <cstddef>
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"

#include "params/SimObject.hh"

namespace gem5
{
struct TAGEBaseParams
    : public SimObjectParams
{
    gem5::branch_prediction::TAGEBase * create() const;
    unsigned histBufferSize;
    int initialTCounterValue;
    unsigned instShiftAmt;
    unsigned logRatioBiModalHystEntries;
    std::vector< int > logTagTableSizes;
    unsigned logUResetPeriod;
    unsigned maxHist;
    unsigned maxNumAlloc;
    unsigned minHist;
    unsigned nHistoryTables;
    std::vector< bool > noSkip;
    unsigned numThreads;
    unsigned numUseAltOnNa;
    unsigned pathHistBits;
    bool speculativeHistUpdate;
    unsigned tagTableCounterBits;
    std::vector< unsigned > tagTableTagWidths;
    unsigned tagTableUBits;
    unsigned useAltOnNaBits;
};

} // namespace gem5

#endif // __PARAMS__TAGEBase__
