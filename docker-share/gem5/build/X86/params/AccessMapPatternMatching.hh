/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_hh.py:235
 */

#ifndef __PARAMS__AccessMapPatternMatching__
#define __PARAMS__AccessMapPatternMatching__

namespace gem5 {
namespace prefetch {
class AccessMapPatternMatching;
} // namespace prefetch
} // namespace gem5
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "params/BaseIndexingPolicy.hh"
#include <cstddef>
#include "params/BaseReplacementPolicy.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include <cstddef>
#include <cstddef>
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include <cstddef>
#include <cstddef>
#include <cstddef>
#include "base/types.hh"
#include <cstddef>
#include "base/types.hh"

#include "params/ClockedObject.hh"

namespace gem5
{
struct AccessMapPatternMatchingParams
    : public ClockedObjectParams
{
    gem5::prefetch::AccessMapPatternMatching * create() const;
    unsigned access_map_table_assoc;
    uint64_t access_map_table_entries;
    gem5::BaseIndexingPolicy * access_map_table_indexing_policy;
    gem5::replacement_policy::Base * access_map_table_replacement_policy;
    unsigned block_size;
    Cycles epoch_cycles;
    double high_accuracy_threshold;
    double high_cache_hit_threshold;
    double high_coverage_threshold;
    uint64_t hot_zone_size;
    unsigned limit_stride;
    double low_accuracy_threshold;
    double low_cache_hit_threshold;
    double low_coverage_threshold;
    Tick offchip_memory_latency;
    unsigned start_degree;
};

} // namespace gem5

#endif // __PARAMS__AccessMapPatternMatching__
