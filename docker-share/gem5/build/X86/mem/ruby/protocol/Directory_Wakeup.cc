/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/StateMachine.py:1499
 */

// Directory: AMD Hammer-like protocol

#include <sys/types.h>
#include <unistd.h>

#include <cassert>
#include <typeinfo>

#include "base/logging.hh"

#include "debug/RubyGenerated.hh"
#include "debug/RubySlicc.hh"
#include "mem/ruby/protocol/Directory_Controller.hh"
#include "mem/ruby/protocol/Directory_Event.hh"
#include "mem/ruby/protocol/Directory_State.hh"

#include "mem/ruby/protocol/Types.hh"
#include "mem/ruby/system/RubySystem.hh"

#include "mem/ruby/slicc_interface/RubySlicc_includes.hh"
namespace gem5
{

namespace ruby
{

void
Directory_Controller::wakeup()
{
    if (getMemReqQueue() && getMemReqQueue()->isReady(clockEdge())) {
        serviceMemoryQueue();
    }

    int counter = 0;
    while (true) {
        unsigned char rejected[6];
        memset(rejected, 0, sizeof(unsigned char)*6);
        // Some cases will put us into an infinite loop without this limit
        assert(counter <= m_transitions_per_cycle);
        if (counter == m_transitions_per_cycle) {
            // Count how often we are fully utilized
            stats.fullyBusyCycles++;

            // Wakeup in another cycle and try again
            scheduleEvent(Cycles(1));
            break;
        }
            // DirectoryInPort triggerQueue_in
            m_cur_in_port = 5;
            try {
                            if ((((*m_triggerQueue_ptr)).isReady((clockEdge())))) {
                                {
                                    // Declare message
                                    [[maybe_unused]] const TriggerMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const TriggerMsg *>(((*m_triggerQueue_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                Directory_PfEntry* pf_entry
                                 = (getProbeFilterEntry(((*in_msg_ptr)).m_addr));
                                Directory_TBE* tbe
                                 = (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr));
                                    if ((((*in_msg_ptr)).m_Type == TriggerType_ALL_ACKS)) {
                                        {

                                            TransitionResult result = doTransition(Directory_Event_All_acks_and_owner_data, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                            if ((((*in_msg_ptr)).m_Type == TriggerType_ALL_ACKS_OWNER_EXISTS)) {
                                                {

                                                    TransitionResult result = doTransition(Directory_Event_All_acks_and_shared_data, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                    if (result == TransitionResult_Valid) {
                                                        counter++;
                                                        continue; // Check the first port again
                                                    } else if (result == TransitionResult_ResourceStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    }

                                                }
                                                ;
                                            } else {
                                                    if ((((*in_msg_ptr)).m_Type == TriggerType_ALL_ACKS_NO_SHARERS)) {
                                                        {

                                                            TransitionResult result = doTransition(Directory_Event_All_acks_and_data_no_sharers, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                            if (result == TransitionResult_Valid) {
                                                                counter++;
                                                                continue; // Check the first port again
                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                scheduleEvent(Cycles(1));
                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                scheduleEvent(Cycles(1));
                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                            }

                                                        }
                                                        ;
                                                    } else {
                                                            if ((((*in_msg_ptr)).m_Type == TriggerType_ALL_UNBLOCKS)) {
                                                                {

                                                                    TransitionResult result = doTransition(Directory_Event_All_Unblocks, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                    if (result == TransitionResult_Valid) {
                                                                        counter++;
                                                                        continue; // Check the first port again
                                                                    } else if (result == TransitionResult_ResourceStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    }

                                                                }
                                                                ;
                                                            } else {
                                                                panic("Runtime Error at MOESI_hammer-dir.sm:334: %s.\n", ("Unexpected message"));
                                                                ;
                                                            }
                                                        }
                                                    }
                                                }
                                                }
                                            }
                        } catch (const RejectException & e) {
                            rejected[0]++;
                        }
            // DirectoryInPort unblockNetwork_in
            m_cur_in_port = 4;
            try {
                            if ((((*m_unblockToDir_ptr)).isReady((clockEdge())))) {
                                {
                                    // Declare message
                                    [[maybe_unused]] const ResponseMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const ResponseMsg *>(((*m_unblockToDir_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                Directory_PfEntry* pf_entry
                                 = (getProbeFilterEntry(((*in_msg_ptr)).m_addr));
                                Directory_TBE* tbe
                                 = (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr));
                                    if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_UNBLOCK)) {
                                        {

                                            TransitionResult result = doTransition(Directory_Event_Unblock, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                            if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_UNBLOCKS)) {
                                                {

                                                    TransitionResult result = doTransition(Directory_Event_UnblockS, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                    if (result == TransitionResult_Valid) {
                                                        counter++;
                                                        continue; // Check the first port again
                                                    } else if (result == TransitionResult_ResourceStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    }

                                                }
                                                ;
                                            } else {
                                                    if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_UNBLOCKM)) {
                                                        {

                                                            TransitionResult result = doTransition(Directory_Event_UnblockM, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                            if (result == TransitionResult_Valid) {
                                                                counter++;
                                                                continue; // Check the first port again
                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                scheduleEvent(Cycles(1));
                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                scheduleEvent(Cycles(1));
                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                            }

                                                        }
                                                        ;
                                                    } else {
                                                            if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_WB_CLEAN)) {
                                                                {

                                                                    TransitionResult result = doTransition(Directory_Event_Writeback_Clean, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                    if (result == TransitionResult_Valid) {
                                                                        counter++;
                                                                        continue; // Check the first port again
                                                                    } else if (result == TransitionResult_ResourceStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    }

                                                                }
                                                                ;
                                                            } else {
                                                                    if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_WB_DIRTY)) {
                                                                        {

                                                                            TransitionResult result = doTransition(Directory_Event_Writeback_Dirty, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                            if (result == TransitionResult_Valid) {
                                                                                counter++;
                                                                                continue; // Check the first port again
                                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            }

                                                                        }
                                                                        ;
                                                                    } else {
                                                                            if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_WB_EXCLUSIVE_CLEAN)) {
                                                                                {

                                                                                    TransitionResult result = doTransition(Directory_Event_Writeback_Exclusive_Clean, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                                    if (result == TransitionResult_Valid) {
                                                                                        counter++;
                                                                                        continue; // Check the first port again
                                                                                    } else if (result == TransitionResult_ResourceStall) {

                                                                                        scheduleEvent(Cycles(1));
                                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                                                        scheduleEvent(Cycles(1));
                                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                                    }

                                                                                }
                                                                                ;
                                                                            } else {
                                                                                    if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_WB_EXCLUSIVE_DIRTY)) {
                                                                                        {

                                                                                            TransitionResult result = doTransition(Directory_Event_Writeback_Exclusive_Dirty, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                                            if (result == TransitionResult_Valid) {
                                                                                                counter++;
                                                                                                continue; // Check the first port again
                                                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                                                scheduleEvent(Cycles(1));
                                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                                                scheduleEvent(Cycles(1));
                                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                                            }

                                                                                        }
                                                                                        ;
                                                                                    } else {
                                                                                        panic("Runtime Error at MOESI_hammer-dir.sm:362: %s.\n", ("Invalid message"));
                                                                                        ;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            }
                                                        }
                        } catch (const RejectException & e) {
                            rejected[1]++;
                        }
            // DirectoryInPort responseToDir_in
            m_cur_in_port = 3;
            try {
                            if ((((*m_responseToDir_ptr)).isReady((clockEdge())))) {
                                {
                                    // Declare message
                                    [[maybe_unused]] const ResponseMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const ResponseMsg *>(((*m_responseToDir_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                Directory_PfEntry* pf_entry
                                 = (getProbeFilterEntry(((*in_msg_ptr)).m_addr));
                                Directory_TBE* tbe
                                 = (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr));
                                    if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_ACK)) {
                                        {

                                            TransitionResult result = doTransition(Directory_Event_Ack, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                            if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_ACK_SHARED)) {
                                                {

                                                    TransitionResult result = doTransition(Directory_Event_Shared_Ack, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                    if (result == TransitionResult_Valid) {
                                                        counter++;
                                                        continue; // Check the first port again
                                                    } else if (result == TransitionResult_ResourceStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    }

                                                }
                                                ;
                                            } else {
                                                    if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_DATA_SHARED)) {
                                                        {

                                                            TransitionResult result = doTransition(Directory_Event_Shared_Data, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                            if (result == TransitionResult_Valid) {
                                                                counter++;
                                                                continue; // Check the first port again
                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                scheduleEvent(Cycles(1));
                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                scheduleEvent(Cycles(1));
                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                            }

                                                        }
                                                        ;
                                                    } else {
                                                            if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_DATA)) {
                                                                {

                                                                    TransitionResult result = doTransition(Directory_Event_Data, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                    if (result == TransitionResult_Valid) {
                                                                        counter++;
                                                                        continue; // Check the first port again
                                                                    } else if (result == TransitionResult_ResourceStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    }

                                                                }
                                                                ;
                                                            } else {
                                                                    if ((((*in_msg_ptr)).m_Type == CoherenceResponseType_DATA_EXCLUSIVE)) {
                                                                        {

                                                                            TransitionResult result = doTransition(Directory_Event_Exclusive_Data, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                            if (result == TransitionResult_Valid) {
                                                                                counter++;
                                                                                continue; // Check the first port again
                                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            }

                                                                        }
                                                                        ;
                                                                    } else {
                                                                        panic("Runtime Error at MOESI_hammer-dir.sm:385: %s.\n", ("Unexpected message"));
                                                                        ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    }
                                                }
                        } catch (const RejectException & e) {
                            rejected[2]++;
                        }
            // DirectoryInPort memQueue_in
            m_cur_in_port = 2;
            try {
                            if ((((*m_responseFromMemory_ptr)).isReady((clockEdge())))) {
                                {
                                    // Declare message
                                    [[maybe_unused]] const MemoryMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const MemoryMsg *>(((*m_responseFromMemory_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                Directory_PfEntry* pf_entry
                                 = (getProbeFilterEntry(((*in_msg_ptr)).m_addr));
                                Directory_TBE* tbe
                                 = (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr));
                                    if ((((*in_msg_ptr)).m_Type == MemoryRequestType_MEMORY_READ)) {
                                        {

                                            TransitionResult result = doTransition(Directory_Event_Memory_Data, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                            if ((((*in_msg_ptr)).m_Type == MemoryRequestType_MEMORY_WB)) {
                                                {

                                                    TransitionResult result = doTransition(Directory_Event_Memory_Ack, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                    if (result == TransitionResult_Valid) {
                                                        counter++;
                                                        continue; // Check the first port again
                                                    } else if (result == TransitionResult_ResourceStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    }

                                                }
                                                ;
                                            } else {
                                                DPRINTF(RubySlicc, "MOESI_hammer-dir.sm:402: %d\n", ((*in_msg_ptr)).m_Type);
                                                panic("Runtime Error at MOESI_hammer-dir.sm:403: %s.\n", ("Invalid message"));
                                                ;
                                            }
                                        }
                                        }
                                    }
                        } catch (const RejectException & e) {
                            rejected[3]++;
                        }
            // DirectoryInPort requestQueue_in
            m_cur_in_port = 1;
            try {
                            if ((((*m_requestToDir_ptr)).isReady((clockEdge())))) {
                                {
                                    // Declare message
                                    [[maybe_unused]] const RequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const RequestMsg *>(((*m_requestToDir_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                Directory_PfEntry* pf_entry
                                 = (getProbeFilterEntry(((*in_msg_ptr)).m_addr));
                                Directory_TBE* tbe
                                 = (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr));
                                    if ((((*in_msg_ptr)).m_Type == CoherenceRequestType_PUT)) {
                                        {

                                            TransitionResult result = doTransition(Directory_Event_PUT, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                            if ((((*in_msg_ptr)).m_Type == CoherenceRequestType_PUTF)) {
                                                {

                                                    TransitionResult result = doTransition(Directory_Event_PUTF, pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                    if (result == TransitionResult_Valid) {
                                                        counter++;
                                                        continue; // Check the first port again
                                                    } else if (result == TransitionResult_ResourceStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    }

                                                }
                                                ;
                                            } else {
                                                    if ((m_probe_filter_enabled || m_full_bit_dir_enabled)) {
                                                            if ((pf_entry != NULL)) {
                                                                {

                                                                    TransitionResult result = doTransition((cache_request_to_event(((*in_msg_ptr)).m_Type)), pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                    if (result == TransitionResult_Valid) {
                                                                        counter++;
                                                                        continue; // Check the first port again
                                                                    } else if (result == TransitionResult_ResourceStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    }

                                                                }
                                                                ;
                                                            } else {
                                                                    if ((((*m_probeFilter_ptr)).cacheAvail(((*in_msg_ptr)).m_addr))) {
                                                                        {

                                                                            TransitionResult result = doTransition((cache_request_to_event(((*in_msg_ptr)).m_Type)), pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                            if (result == TransitionResult_Valid) {
                                                                                counter++;
                                                                                continue; // Check the first port again
                                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            }

                                                                        }
                                                                        ;
                                                                    } else {
                                                                        Addr victim
                                                                         = (((*m_probeFilter_ptr)).cacheProbe(((*in_msg_ptr)).m_addr));
                                                                        {

                                                                            TransitionResult result = doTransition(Directory_Event_Pf_Replacement, (getProbeFilterEntry(victim)), (((*m_TBEs_ptr)).lookup(victim)), victim);

                                                                            if (result == TransitionResult_Valid) {
                                                                                counter++;
                                                                                continue; // Check the first port again
                                                                            } else if (result == TransitionResult_ResourceStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            } else if (result == TransitionResult_ProtocolStall) {

                                                                                scheduleEvent(Cycles(1));
                                                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                            }

                                                                        }
                                                                        ;
                                                                    }
                                                                }
                                                            } else {
                                                                {

                                                                    TransitionResult result = doTransition((cache_request_to_event(((*in_msg_ptr)).m_Type)), pf_entry, tbe, ((*in_msg_ptr)).m_addr);

                                                                    if (result == TransitionResult_Valid) {
                                                                        counter++;
                                                                        continue; // Check the first port again
                                                                    } else if (result == TransitionResult_ResourceStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                                        scheduleEvent(Cycles(1));
                                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                                    }

                                                                }
                                                                ;
                                                            }
                                                        }
                                                    }
                                                    }
                                                }
                        } catch (const RejectException & e) {
                            rejected[4]++;
                        }
            // DirectoryInPort dmaRequestQueue_in
            m_cur_in_port = 0;
            try {
                            if ((((*m_dmaRequestToDir_ptr)).isReady((clockEdge())))) {
                                {
                                    // Declare message
                                    [[maybe_unused]] const DMARequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const DMARequestMsg *>(((*m_dmaRequestToDir_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                Directory_PfEntry* pf_entry
                                 = (getProbeFilterEntry(((*in_msg_ptr)).m_LineAddress));
                                Directory_TBE* tbe
                                 = (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_LineAddress));
                                    if ((((*in_msg_ptr)).m_Type == DMARequestType_READ)) {
                                        {

                                            TransitionResult result = doTransition(Directory_Event_DMA_READ, pf_entry, tbe, ((*in_msg_ptr)).m_LineAddress);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                            if ((((*in_msg_ptr)).m_Type == DMARequestType_WRITE)) {
                                                {

                                                    TransitionResult result = doTransition(Directory_Event_DMA_WRITE, pf_entry, tbe, ((*in_msg_ptr)).m_LineAddress);

                                                    if (result == TransitionResult_Valid) {
                                                        counter++;
                                                        continue; // Check the first port again
                                                    } else if (result == TransitionResult_ResourceStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    }

                                                }
                                                ;
                                            } else {
                                                panic("Runtime Error at MOESI_hammer-dir.sm:452: %s.\n", ("Invalid message"));
                                                ;
                                            }
                                        }
                                        }
                                    }
                        } catch (const RejectException & e) {
                            rejected[5]++;
                        }
        // If we got this far, we have nothing left todo or something went
        // wrong
        break;
    }
}

} // namespace ruby
} // namespace gem5
