/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:501
 */

#include <iostream>
#include <memory>

#include "mem/ruby/protocol/MemoryMsg.hh"
#include "mem/ruby/system/RubySystem.hh"

namespace gem5
{

namespace ruby
{

/** \brief Print the state of this object */
void
MemoryMsg::print(std::ostream& out) const
{
    out << "[MemoryMsg: ";
    out << "addr = " << printAddress(m_addr) << " ";
    out << "Type = " << m_Type << " ";
    out << "Sender = " << m_Sender << " ";
    out << "OriginalRequestorMachId = " << m_OriginalRequestorMachId << " ";
    out << "DataBlk = " << m_DataBlk << " ";
    out << "MessageSize = " << m_MessageSize << " ";
    out << "Len = " << m_Len << " ";
    out << "Prefetch = " << m_Prefetch << " ";
    out << "ReadX = " << m_ReadX << " ";
    out << "Acks = " << m_Acks << " ";
    out << "]";
}
bool
MemoryMsg::functionalRead(Packet* param_pkt)
{
    if (((m_MessageSize == MessageSizeType_Response_Data) || (m_MessageSize == MessageSizeType_Writeback_Data))) {
        return (testAndRead(m_addr, m_DataBlk, param_pkt));
    }
    return (false);

}
bool
MemoryMsg::functionalRead(Packet* param_pkt, WriteMask& param_mask)
{
    if (((m_MessageSize == MessageSizeType_Response_Data) || (m_MessageSize == MessageSizeType_Writeback_Data))) {
        WriteMask read_mask;
        ((read_mask).setMask((addressOffset(m_addr, (makeLineAddress(m_addr)))), m_Len, (true)));
            if ((m_MessageSize != MessageSizeType_Writeback_Data)) {
                ((read_mask).setInvertedMask(param_mask));
            }
                if (((read_mask).isEmpty())) {
                    return (false);
                } else {
                        if ((testAndReadMask(m_addr, m_DataBlk, read_mask, param_pkt))) {
                            ((param_mask).orMask(read_mask));
                            return (true);
                        }
                    }
                }
                return (false);

}
bool
MemoryMsg::functionalWrite(Packet* param_pkt)
{
return (testAndWrite(m_addr, m_DataBlk, param_pkt));

}
} // namespace ruby
} // namespace gem5
