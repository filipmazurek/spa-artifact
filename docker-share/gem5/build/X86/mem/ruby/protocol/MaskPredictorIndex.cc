/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/MaskPredictorIndex.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const MaskPredictorIndex& obj)
{
    out << MaskPredictorIndex_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
MaskPredictorIndex_to_string(const MaskPredictorIndex& obj)
{
    switch(obj) {
      case MaskPredictorIndex_Undefined:
        return "Undefined";
      case MaskPredictorIndex_DataBlock:
        return "DataBlock";
      case MaskPredictorIndex_PC:
        return "PC";
      default:
        panic("Invalid range for type MaskPredictorIndex");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
MaskPredictorIndex
string_to_MaskPredictorIndex(const std::string& str)
{
    if (str == "Undefined") {
        return MaskPredictorIndex_Undefined;
    } else if (str == "DataBlock") {
        return MaskPredictorIndex_DataBlock;
    } else if (str == "PC") {
        return MaskPredictorIndex_PC;
    } else {
        panic("Invalid string conversion for %s, type MaskPredictorIndex", str);
    }
}

// Code to increment an enumeration type
MaskPredictorIndex&
operator++(MaskPredictorIndex& e)
{
    assert(e < MaskPredictorIndex_NUM);
    return e = MaskPredictorIndex(e+1);
}
} // namespace ruby
} // namespace gem5
