/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/DMAResponseType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const DMAResponseType& obj)
{
    out << DMAResponseType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
DMAResponseType_to_string(const DMAResponseType& obj)
{
    switch(obj) {
      case DMAResponseType_DATA:
        return "DATA";
      case DMAResponseType_ACK:
        return "ACK";
      case DMAResponseType_NULL:
        return "NULL";
      default:
        panic("Invalid range for type DMAResponseType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
DMAResponseType
string_to_DMAResponseType(const std::string& str)
{
    if (str == "DATA") {
        return DMAResponseType_DATA;
    } else if (str == "ACK") {
        return DMAResponseType_ACK;
    } else if (str == "NULL") {
        return DMAResponseType_NULL;
    } else {
        panic("Invalid string conversion for %s, type DMAResponseType", str);
    }
}

// Code to increment an enumeration type
DMAResponseType&
operator++(DMAResponseType& e)
{
    assert(e < DMAResponseType_NUM);
    return e = DMAResponseType(e+1);
}
} // namespace ruby
} // namespace gem5
