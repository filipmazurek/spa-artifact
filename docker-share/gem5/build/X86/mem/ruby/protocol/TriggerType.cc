/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/TriggerType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const TriggerType& obj)
{
    out << TriggerType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
TriggerType_to_string(const TriggerType& obj)
{
    switch(obj) {
      case TriggerType_L2_to_L1:
        return "L2_to_L1";
      case TriggerType_ALL_ACKS:
        return "ALL_ACKS";
      case TriggerType_ALL_ACKS_OWNER_EXISTS:
        return "ALL_ACKS_OWNER_EXISTS";
      case TriggerType_ALL_ACKS_NO_SHARERS:
        return "ALL_ACKS_NO_SHARERS";
      case TriggerType_ALL_UNBLOCKS:
        return "ALL_UNBLOCKS";
      default:
        panic("Invalid range for type TriggerType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
TriggerType
string_to_TriggerType(const std::string& str)
{
    if (str == "L2_to_L1") {
        return TriggerType_L2_to_L1;
    } else if (str == "ALL_ACKS") {
        return TriggerType_ALL_ACKS;
    } else if (str == "ALL_ACKS_OWNER_EXISTS") {
        return TriggerType_ALL_ACKS_OWNER_EXISTS;
    } else if (str == "ALL_ACKS_NO_SHARERS") {
        return TriggerType_ALL_ACKS_NO_SHARERS;
    } else if (str == "ALL_UNBLOCKS") {
        return TriggerType_ALL_UNBLOCKS;
    } else {
        panic("Invalid string conversion for %s, type TriggerType", str);
    }
}

// Code to increment an enumeration type
TriggerType&
operator++(TriggerType& e)
{
    assert(e < TriggerType_NUM);
    return e = TriggerType(e+1);
}
} // namespace ruby
} // namespace gem5
