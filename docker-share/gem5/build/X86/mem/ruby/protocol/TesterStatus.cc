/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/TesterStatus.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const TesterStatus& obj)
{
    out << TesterStatus_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
TesterStatus_to_string(const TesterStatus& obj)
{
    switch(obj) {
      case TesterStatus_Idle:
        return "Idle";
      case TesterStatus_Action_Pending:
        return "Action_Pending";
      case TesterStatus_Ready:
        return "Ready";
      case TesterStatus_Check_Pending:
        return "Check_Pending";
      default:
        panic("Invalid range for type TesterStatus");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
TesterStatus
string_to_TesterStatus(const std::string& str)
{
    if (str == "Idle") {
        return TesterStatus_Idle;
    } else if (str == "Action_Pending") {
        return TesterStatus_Action_Pending;
    } else if (str == "Ready") {
        return TesterStatus_Ready;
    } else if (str == "Check_Pending") {
        return TesterStatus_Check_Pending;
    } else {
        panic("Invalid string conversion for %s, type TesterStatus", str);
    }
}

// Code to increment an enumeration type
TesterStatus&
operator++(TesterStatus& e)
{
    assert(e < TesterStatus_NUM);
    return e = TesterStatus(e+1);
}
} // namespace ruby
} // namespace gem5
