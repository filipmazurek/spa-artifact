/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/CacheResourceType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const CacheResourceType& obj)
{
    out << CacheResourceType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
CacheResourceType_to_string(const CacheResourceType& obj)
{
    switch(obj) {
      case CacheResourceType_DataArray:
        return "DataArray";
      case CacheResourceType_TagArray:
        return "TagArray";
      default:
        panic("Invalid range for type CacheResourceType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
CacheResourceType
string_to_CacheResourceType(const std::string& str)
{
    if (str == "DataArray") {
        return CacheResourceType_DataArray;
    } else if (str == "TagArray") {
        return CacheResourceType_TagArray;
    } else {
        panic("Invalid string conversion for %s, type CacheResourceType", str);
    }
}

// Code to increment an enumeration type
CacheResourceType&
operator++(CacheResourceType& e)
{
    assert(e < CacheResourceType_NUM);
    return e = CacheResourceType(e+1);
}
} // namespace ruby
} // namespace gem5
