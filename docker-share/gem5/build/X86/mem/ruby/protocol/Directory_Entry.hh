/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:443
 */

#ifndef __Directory_Entry_HH__
#define __Directory_Entry_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/Directory_State.hh"
#include "mem/ruby/protocol/AbstractCacheEntry.hh"
namespace gem5
{

namespace ruby
{

class Directory_Entry :  public AbstractCacheEntry
{
  public:
    Directory_Entry
()
		{
        m_DirectoryState = Directory_State_E;
         // default value of Directory_State
    }
    Directory_Entry(const Directory_Entry&) = default;
    Directory_Entry
    &operator=(const Directory_Entry&) = default;
    Directory_Entry(const Directory_State& local_DirectoryState)
        : AbstractCacheEntry()
    {
        m_DirectoryState = local_DirectoryState;
    }
    Directory_Entry*
    clone() const
    {
         return new Directory_Entry(*this);
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for DirectoryState field.
     *  \return DirectoryState field
     */
    const Directory_State&
    getDirectoryState() const
    {
        return m_DirectoryState;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for DirectoryState field.
     *  \return DirectoryState field
     */
    Directory_State&
    getDirectoryState()
    {
        return m_DirectoryState;
    }
    // Mutator methods for each field
    /** \brief Mutator method for DirectoryState field */
    void
    setDirectoryState(const Directory_State& local_DirectoryState)
    {
        m_DirectoryState = local_DirectoryState;
    }
    void print(std::ostream& out) const;
  //private:
    /** Directory state */
    Directory_State m_DirectoryState;
};
inline ::std::ostream&
operator<<(::std::ostream& out, const Directory_Entry& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __Directory_Entry_HH__
