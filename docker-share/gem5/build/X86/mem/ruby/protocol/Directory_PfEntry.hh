/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:443
 */

#ifndef __Directory_PfEntry_HH__
#define __Directory_PfEntry_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/Directory_State.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/Set.hh"
#include "mem/ruby/protocol/AbstractCacheEntry.hh"
namespace gem5
{

namespace ruby
{

class Directory_PfEntry :  public AbstractCacheEntry
{
  public:
    Directory_PfEntry
()
		{
        m_PfState = Directory_State_E;
         // default value of Directory_State
        // m_Owner has no default
        // m_Sharers has no default
    }
    Directory_PfEntry(const Directory_PfEntry&) = default;
    Directory_PfEntry
    &operator=(const Directory_PfEntry&) = default;
    Directory_PfEntry(const Directory_State& local_PfState, const MachineID& local_Owner, const Set& local_Sharers)
        : AbstractCacheEntry()
    {
        m_PfState = local_PfState;
        m_Owner = local_Owner;
        m_Sharers = local_Sharers;
    }
    Directory_PfEntry*
    clone() const
    {
         return new Directory_PfEntry(*this);
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for PfState field.
     *  \return PfState field
     */
    const Directory_State&
    getPfState() const
    {
        return m_PfState;
    }
    /** \brief Const accessor method for Owner field.
     *  \return Owner field
     */
    const MachineID&
    getOwner() const
    {
        return m_Owner;
    }
    /** \brief Const accessor method for Sharers field.
     *  \return Sharers field
     */
    const Set&
    getSharers() const
    {
        return m_Sharers;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for PfState field.
     *  \return PfState field
     */
    Directory_State&
    getPfState()
    {
        return m_PfState;
    }
    /** \brief Non-const accessor method for Owner field.
     *  \return Owner field
     */
    MachineID&
    getOwner()
    {
        return m_Owner;
    }
    /** \brief Non-const accessor method for Sharers field.
     *  \return Sharers field
     */
    Set&
    getSharers()
    {
        return m_Sharers;
    }
    // Mutator methods for each field
    /** \brief Mutator method for PfState field */
    void
    setPfState(const Directory_State& local_PfState)
    {
        m_PfState = local_PfState;
    }
    /** \brief Mutator method for Owner field */
    void
    setOwner(const MachineID& local_Owner)
    {
        m_Owner = local_Owner;
    }
    /** \brief Mutator method for Sharers field */
    void
    setSharers(const Set& local_Sharers)
    {
        m_Sharers = local_Sharers;
    }
    void print(std::ostream& out) const;
  //private:
    /** Directory state */
    Directory_State m_PfState;
    /** Owner node */
    MachineID m_Owner;
    /** sharing vector for full bit directory */
    Set m_Sharers;
};
inline ::std::ostream&
operator<<(::std::ostream& out, const Directory_PfEntry& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __Directory_PfEntry_HH__
