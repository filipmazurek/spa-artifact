/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/DMARequestType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const DMARequestType& obj)
{
    out << DMARequestType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
DMARequestType_to_string(const DMARequestType& obj)
{
    switch(obj) {
      case DMARequestType_READ:
        return "READ";
      case DMARequestType_WRITE:
        return "WRITE";
      case DMARequestType_NULL:
        return "NULL";
      default:
        panic("Invalid range for type DMARequestType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
DMARequestType
string_to_DMARequestType(const std::string& str)
{
    if (str == "READ") {
        return DMARequestType_READ;
    } else if (str == "WRITE") {
        return DMARequestType_WRITE;
    } else if (str == "NULL") {
        return DMARequestType_NULL;
    } else {
        panic("Invalid string conversion for %s, type DMARequestType", str);
    }
}

// Code to increment an enumeration type
DMARequestType&
operator++(DMARequestType& e)
{
    assert(e < DMARequestType_NUM);
    return e = DMARequestType(e+1);
}
} // namespace ruby
} // namespace gem5
