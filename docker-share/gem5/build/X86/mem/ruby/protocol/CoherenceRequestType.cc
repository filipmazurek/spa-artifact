/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/CoherenceRequestType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const CoherenceRequestType& obj)
{
    out << CoherenceRequestType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
CoherenceRequestType_to_string(const CoherenceRequestType& obj)
{
    switch(obj) {
      case CoherenceRequestType_GETX:
        return "GETX";
      case CoherenceRequestType_GETS:
        return "GETS";
      case CoherenceRequestType_MERGED_GETS:
        return "MERGED_GETS";
      case CoherenceRequestType_PUT:
        return "PUT";
      case CoherenceRequestType_WB_ACK:
        return "WB_ACK";
      case CoherenceRequestType_WB_NACK:
        return "WB_NACK";
      case CoherenceRequestType_PUTF:
        return "PUTF";
      case CoherenceRequestType_GETF:
        return "GETF";
      case CoherenceRequestType_BLOCK_ACK:
        return "BLOCK_ACK";
      case CoherenceRequestType_INV:
        return "INV";
      default:
        panic("Invalid range for type CoherenceRequestType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
CoherenceRequestType
string_to_CoherenceRequestType(const std::string& str)
{
    if (str == "GETX") {
        return CoherenceRequestType_GETX;
    } else if (str == "GETS") {
        return CoherenceRequestType_GETS;
    } else if (str == "MERGED_GETS") {
        return CoherenceRequestType_MERGED_GETS;
    } else if (str == "PUT") {
        return CoherenceRequestType_PUT;
    } else if (str == "WB_ACK") {
        return CoherenceRequestType_WB_ACK;
    } else if (str == "WB_NACK") {
        return CoherenceRequestType_WB_NACK;
    } else if (str == "PUTF") {
        return CoherenceRequestType_PUTF;
    } else if (str == "GETF") {
        return CoherenceRequestType_GETF;
    } else if (str == "BLOCK_ACK") {
        return CoherenceRequestType_BLOCK_ACK;
    } else if (str == "INV") {
        return CoherenceRequestType_INV;
    } else {
        panic("Invalid string conversion for %s, type CoherenceRequestType", str);
    }
}

// Code to increment an enumeration type
CoherenceRequestType&
operator++(CoherenceRequestType& e)
{
    assert(e < CoherenceRequestType_NUM);
    return e = CoherenceRequestType(e+1);
}
} // namespace ruby
} // namespace gem5
