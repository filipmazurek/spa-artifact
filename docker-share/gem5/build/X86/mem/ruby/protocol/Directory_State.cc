/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/Directory_State.hh"

namespace gem5
{

namespace ruby
{

// Code to convert the current state to an access permission
AccessPermission Directory_State_to_permission(const Directory_State& obj)
{
    switch(obj) {
      case Directory_State_NX:
        return AccessPermission_Maybe_Stale;
      case Directory_State_NO:
        return AccessPermission_Maybe_Stale;
      case Directory_State_S:
        return AccessPermission_Read_Only;
      case Directory_State_O:
        return AccessPermission_Read_Only;
      case Directory_State_E:
        return AccessPermission_Read_Write;
      case Directory_State_O_R:
        return AccessPermission_Read_Only;
      case Directory_State_S_R:
        return AccessPermission_Read_Only;
      case Directory_State_NO_R:
        return AccessPermission_Busy;
      case Directory_State_NO_B:
        return AccessPermission_Busy;
      case Directory_State_NO_B_X:
        return AccessPermission_Busy;
      case Directory_State_NO_B_S:
        return AccessPermission_Busy;
      case Directory_State_NO_B_S_W:
        return AccessPermission_Busy;
      case Directory_State_O_B:
        return AccessPermission_Busy;
      case Directory_State_NO_B_W:
        return AccessPermission_Busy;
      case Directory_State_O_B_W:
        return AccessPermission_Busy;
      case Directory_State_NO_W:
        return AccessPermission_Busy;
      case Directory_State_O_W:
        return AccessPermission_Busy;
      case Directory_State_NO_DW_B_W:
        return AccessPermission_Busy;
      case Directory_State_NO_DR_B_W:
        return AccessPermission_Busy;
      case Directory_State_NO_DR_B_D:
        return AccessPermission_Busy;
      case Directory_State_NO_DR_B:
        return AccessPermission_Busy;
      case Directory_State_NO_DW_W:
        return AccessPermission_Busy;
      case Directory_State_O_DR_B_W:
        return AccessPermission_Busy;
      case Directory_State_O_DR_B:
        return AccessPermission_Busy;
      case Directory_State_WB:
        return AccessPermission_Busy;
      case Directory_State_WB_O_W:
        return AccessPermission_Busy;
      case Directory_State_WB_E_W:
        return AccessPermission_Busy;
      case Directory_State_NO_F:
        return AccessPermission_Busy;
      case Directory_State_NO_F_W:
        return AccessPermission_Busy;
      default:
        panic("Unknown state access permission converstion for Directory_State");
    }
    // Appease the compiler since this function has a return value
    return AccessPermission_Invalid;
}

} // namespace ruby
} // namespace gem5

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const Directory_State& obj)
{
    out << Directory_State_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
Directory_State_to_string(const Directory_State& obj)
{
    switch(obj) {
      case Directory_State_NX:
        return "NX";
      case Directory_State_NO:
        return "NO";
      case Directory_State_S:
        return "S";
      case Directory_State_O:
        return "O";
      case Directory_State_E:
        return "E";
      case Directory_State_O_R:
        return "O_R";
      case Directory_State_S_R:
        return "S_R";
      case Directory_State_NO_R:
        return "NO_R";
      case Directory_State_NO_B:
        return "NO_B";
      case Directory_State_NO_B_X:
        return "NO_B_X";
      case Directory_State_NO_B_S:
        return "NO_B_S";
      case Directory_State_NO_B_S_W:
        return "NO_B_S_W";
      case Directory_State_O_B:
        return "O_B";
      case Directory_State_NO_B_W:
        return "NO_B_W";
      case Directory_State_O_B_W:
        return "O_B_W";
      case Directory_State_NO_W:
        return "NO_W";
      case Directory_State_O_W:
        return "O_W";
      case Directory_State_NO_DW_B_W:
        return "NO_DW_B_W";
      case Directory_State_NO_DR_B_W:
        return "NO_DR_B_W";
      case Directory_State_NO_DR_B_D:
        return "NO_DR_B_D";
      case Directory_State_NO_DR_B:
        return "NO_DR_B";
      case Directory_State_NO_DW_W:
        return "NO_DW_W";
      case Directory_State_O_DR_B_W:
        return "O_DR_B_W";
      case Directory_State_O_DR_B:
        return "O_DR_B";
      case Directory_State_WB:
        return "WB";
      case Directory_State_WB_O_W:
        return "WB_O_W";
      case Directory_State_WB_E_W:
        return "WB_E_W";
      case Directory_State_NO_F:
        return "NO_F";
      case Directory_State_NO_F_W:
        return "NO_F_W";
      default:
        panic("Invalid range for type Directory_State");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
Directory_State
string_to_Directory_State(const std::string& str)
{
    if (str == "NX") {
        return Directory_State_NX;
    } else if (str == "NO") {
        return Directory_State_NO;
    } else if (str == "S") {
        return Directory_State_S;
    } else if (str == "O") {
        return Directory_State_O;
    } else if (str == "E") {
        return Directory_State_E;
    } else if (str == "O_R") {
        return Directory_State_O_R;
    } else if (str == "S_R") {
        return Directory_State_S_R;
    } else if (str == "NO_R") {
        return Directory_State_NO_R;
    } else if (str == "NO_B") {
        return Directory_State_NO_B;
    } else if (str == "NO_B_X") {
        return Directory_State_NO_B_X;
    } else if (str == "NO_B_S") {
        return Directory_State_NO_B_S;
    } else if (str == "NO_B_S_W") {
        return Directory_State_NO_B_S_W;
    } else if (str == "O_B") {
        return Directory_State_O_B;
    } else if (str == "NO_B_W") {
        return Directory_State_NO_B_W;
    } else if (str == "O_B_W") {
        return Directory_State_O_B_W;
    } else if (str == "NO_W") {
        return Directory_State_NO_W;
    } else if (str == "O_W") {
        return Directory_State_O_W;
    } else if (str == "NO_DW_B_W") {
        return Directory_State_NO_DW_B_W;
    } else if (str == "NO_DR_B_W") {
        return Directory_State_NO_DR_B_W;
    } else if (str == "NO_DR_B_D") {
        return Directory_State_NO_DR_B_D;
    } else if (str == "NO_DR_B") {
        return Directory_State_NO_DR_B;
    } else if (str == "NO_DW_W") {
        return Directory_State_NO_DW_W;
    } else if (str == "O_DR_B_W") {
        return Directory_State_O_DR_B_W;
    } else if (str == "O_DR_B") {
        return Directory_State_O_DR_B;
    } else if (str == "WB") {
        return Directory_State_WB;
    } else if (str == "WB_O_W") {
        return Directory_State_WB_O_W;
    } else if (str == "WB_E_W") {
        return Directory_State_WB_E_W;
    } else if (str == "NO_F") {
        return Directory_State_NO_F;
    } else if (str == "NO_F_W") {
        return Directory_State_NO_F_W;
    } else {
        panic("Invalid string conversion for %s, type Directory_State", str);
    }
}

// Code to increment an enumeration type
Directory_State&
operator++(Directory_State& e)
{
    assert(e < Directory_State_NUM);
    return e = Directory_State(e+1);
}
} // namespace ruby
} // namespace gem5
