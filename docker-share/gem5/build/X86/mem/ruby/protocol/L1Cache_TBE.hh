/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:443
 */

#ifndef __L1Cache_TBE_HH__
#define __L1Cache_TBE_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/L1Cache_State.hh"
#include "mem/ruby/protocol/DataBlock.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/MachineID.hh"
namespace gem5
{

namespace ruby
{

class L1Cache_TBE
{
  public:
    L1Cache_TBE
()
		{
        m_TBEState = L1Cache_State_I;
         // default value of L1Cache_State
        // m_DataBlk has no default
        m_Dirty = false;
         // default value of bool
        m_NumPendingMsgs = 0;
         // default value of int
        m_Sharers = false;
         // default value of bool
        m_AppliedSilentAcks = false; // default for this field
        // m_LastResponder has no default
        // m_CurOwner has no default
        m_InitialRequestTime = Cycles(0); // default for this field
        m_ForwardRequestTime = Cycles(0); // default for this field
        m_FirstResponseTime = Cycles(0); // default for this field
    }
    L1Cache_TBE(const L1Cache_TBE&) = default;
    L1Cache_TBE
    &operator=(const L1Cache_TBE&) = default;
    L1Cache_TBE(const L1Cache_State& local_TBEState, const DataBlock& local_DataBlk, const bool& local_Dirty, const int& local_NumPendingMsgs, const bool& local_Sharers, const bool& local_AppliedSilentAcks, const MachineID& local_LastResponder, const MachineID& local_CurOwner, const Cycles& local_InitialRequestTime, const Cycles& local_ForwardRequestTime, const Cycles& local_FirstResponseTime)
    {
        m_TBEState = local_TBEState;
        m_DataBlk = local_DataBlk;
        m_Dirty = local_Dirty;
        m_NumPendingMsgs = local_NumPendingMsgs;
        m_Sharers = local_Sharers;
        m_AppliedSilentAcks = local_AppliedSilentAcks;
        m_LastResponder = local_LastResponder;
        m_CurOwner = local_CurOwner;
        m_InitialRequestTime = local_InitialRequestTime;
        m_ForwardRequestTime = local_ForwardRequestTime;
        m_FirstResponseTime = local_FirstResponseTime;
    }
    L1Cache_TBE*
    clone() const
    {
         return new L1Cache_TBE(*this);
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for TBEState field.
     *  \return TBEState field
     */
    const L1Cache_State&
    getTBEState() const
    {
        return m_TBEState;
    }
    /** \brief Const accessor method for DataBlk field.
     *  \return DataBlk field
     */
    const DataBlock&
    getDataBlk() const
    {
        return m_DataBlk;
    }
    /** \brief Const accessor method for Dirty field.
     *  \return Dirty field
     */
    const bool&
    getDirty() const
    {
        return m_Dirty;
    }
    /** \brief Const accessor method for NumPendingMsgs field.
     *  \return NumPendingMsgs field
     */
    const int&
    getNumPendingMsgs() const
    {
        return m_NumPendingMsgs;
    }
    /** \brief Const accessor method for Sharers field.
     *  \return Sharers field
     */
    const bool&
    getSharers() const
    {
        return m_Sharers;
    }
    /** \brief Const accessor method for AppliedSilentAcks field.
     *  \return AppliedSilentAcks field
     */
    const bool&
    getAppliedSilentAcks() const
    {
        return m_AppliedSilentAcks;
    }
    /** \brief Const accessor method for LastResponder field.
     *  \return LastResponder field
     */
    const MachineID&
    getLastResponder() const
    {
        return m_LastResponder;
    }
    /** \brief Const accessor method for CurOwner field.
     *  \return CurOwner field
     */
    const MachineID&
    getCurOwner() const
    {
        return m_CurOwner;
    }
    /** \brief Const accessor method for InitialRequestTime field.
     *  \return InitialRequestTime field
     */
    const Cycles&
    getInitialRequestTime() const
    {
        return m_InitialRequestTime;
    }
    /** \brief Const accessor method for ForwardRequestTime field.
     *  \return ForwardRequestTime field
     */
    const Cycles&
    getForwardRequestTime() const
    {
        return m_ForwardRequestTime;
    }
    /** \brief Const accessor method for FirstResponseTime field.
     *  \return FirstResponseTime field
     */
    const Cycles&
    getFirstResponseTime() const
    {
        return m_FirstResponseTime;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for TBEState field.
     *  \return TBEState field
     */
    L1Cache_State&
    getTBEState()
    {
        return m_TBEState;
    }
    /** \brief Non-const accessor method for DataBlk field.
     *  \return DataBlk field
     */
    DataBlock&
    getDataBlk()
    {
        return m_DataBlk;
    }
    /** \brief Non-const accessor method for Dirty field.
     *  \return Dirty field
     */
    bool&
    getDirty()
    {
        return m_Dirty;
    }
    /** \brief Non-const accessor method for NumPendingMsgs field.
     *  \return NumPendingMsgs field
     */
    int&
    getNumPendingMsgs()
    {
        return m_NumPendingMsgs;
    }
    /** \brief Non-const accessor method for Sharers field.
     *  \return Sharers field
     */
    bool&
    getSharers()
    {
        return m_Sharers;
    }
    /** \brief Non-const accessor method for AppliedSilentAcks field.
     *  \return AppliedSilentAcks field
     */
    bool&
    getAppliedSilentAcks()
    {
        return m_AppliedSilentAcks;
    }
    /** \brief Non-const accessor method for LastResponder field.
     *  \return LastResponder field
     */
    MachineID&
    getLastResponder()
    {
        return m_LastResponder;
    }
    /** \brief Non-const accessor method for CurOwner field.
     *  \return CurOwner field
     */
    MachineID&
    getCurOwner()
    {
        return m_CurOwner;
    }
    /** \brief Non-const accessor method for InitialRequestTime field.
     *  \return InitialRequestTime field
     */
    Cycles&
    getInitialRequestTime()
    {
        return m_InitialRequestTime;
    }
    /** \brief Non-const accessor method for ForwardRequestTime field.
     *  \return ForwardRequestTime field
     */
    Cycles&
    getForwardRequestTime()
    {
        return m_ForwardRequestTime;
    }
    /** \brief Non-const accessor method for FirstResponseTime field.
     *  \return FirstResponseTime field
     */
    Cycles&
    getFirstResponseTime()
    {
        return m_FirstResponseTime;
    }
    // Mutator methods for each field
    /** \brief Mutator method for TBEState field */
    void
    setTBEState(const L1Cache_State& local_TBEState)
    {
        m_TBEState = local_TBEState;
    }
    /** \brief Mutator method for DataBlk field */
    void
    setDataBlk(const DataBlock& local_DataBlk)
    {
        m_DataBlk = local_DataBlk;
    }
    /** \brief Mutator method for Dirty field */
    void
    setDirty(const bool& local_Dirty)
    {
        m_Dirty = local_Dirty;
    }
    /** \brief Mutator method for NumPendingMsgs field */
    void
    setNumPendingMsgs(const int& local_NumPendingMsgs)
    {
        m_NumPendingMsgs = local_NumPendingMsgs;
    }
    /** \brief Mutator method for Sharers field */
    void
    setSharers(const bool& local_Sharers)
    {
        m_Sharers = local_Sharers;
    }
    /** \brief Mutator method for AppliedSilentAcks field */
    void
    setAppliedSilentAcks(const bool& local_AppliedSilentAcks)
    {
        m_AppliedSilentAcks = local_AppliedSilentAcks;
    }
    /** \brief Mutator method for LastResponder field */
    void
    setLastResponder(const MachineID& local_LastResponder)
    {
        m_LastResponder = local_LastResponder;
    }
    /** \brief Mutator method for CurOwner field */
    void
    setCurOwner(const MachineID& local_CurOwner)
    {
        m_CurOwner = local_CurOwner;
    }
    /** \brief Mutator method for InitialRequestTime field */
    void
    setInitialRequestTime(const Cycles& local_InitialRequestTime)
    {
        m_InitialRequestTime = local_InitialRequestTime;
    }
    /** \brief Mutator method for ForwardRequestTime field */
    void
    setForwardRequestTime(const Cycles& local_ForwardRequestTime)
    {
        m_ForwardRequestTime = local_ForwardRequestTime;
    }
    /** \brief Mutator method for FirstResponseTime field */
    void
    setFirstResponseTime(const Cycles& local_FirstResponseTime)
    {
        m_FirstResponseTime = local_FirstResponseTime;
    }
    void print(std::ostream& out) const;
  //private:
    /** Transient state */
    L1Cache_State m_TBEState;
    /** data for the block, required for concurrent writebacks */
    DataBlock m_DataBlk;
    /** Is the data dirty (different than memory)? */
    bool m_Dirty;
    /** Number of acks/data messages that this processor is waiting for */
    int m_NumPendingMsgs;
    /** On a GetS, did we find any other sharers in the system */
    bool m_Sharers;
    /** for full-bit dir, does the pending msg count reflect the silent acks */
    bool m_AppliedSilentAcks;
    /** last machine to send a response for this request */
    MachineID m_LastResponder;
    /** current owner of the block, used for UnblockS responses */
    MachineID m_CurOwner;
    /** time the initial requests was sent from the L1Cache */
    Cycles m_InitialRequestTime;
    /** time the dir forwarded the request */
    Cycles m_ForwardRequestTime;
    /** the time the first response was received */
    Cycles m_FirstResponseTime;
};
inline ::std::ostream&
operator<<(::std::ostream& out, const L1Cache_TBE& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __L1Cache_TBE_HH__
