/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/CoherenceResponseType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const CoherenceResponseType& obj)
{
    out << CoherenceResponseType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
CoherenceResponseType_to_string(const CoherenceResponseType& obj)
{
    switch(obj) {
      case CoherenceResponseType_ACK:
        return "ACK";
      case CoherenceResponseType_ACK_SHARED:
        return "ACK_SHARED";
      case CoherenceResponseType_DATA:
        return "DATA";
      case CoherenceResponseType_DATA_SHARED:
        return "DATA_SHARED";
      case CoherenceResponseType_DATA_EXCLUSIVE:
        return "DATA_EXCLUSIVE";
      case CoherenceResponseType_WB_CLEAN:
        return "WB_CLEAN";
      case CoherenceResponseType_WB_DIRTY:
        return "WB_DIRTY";
      case CoherenceResponseType_WB_EXCLUSIVE_CLEAN:
        return "WB_EXCLUSIVE_CLEAN";
      case CoherenceResponseType_WB_EXCLUSIVE_DIRTY:
        return "WB_EXCLUSIVE_DIRTY";
      case CoherenceResponseType_UNBLOCK:
        return "UNBLOCK";
      case CoherenceResponseType_UNBLOCKS:
        return "UNBLOCKS";
      case CoherenceResponseType_UNBLOCKM:
        return "UNBLOCKM";
      case CoherenceResponseType_NULL:
        return "NULL";
      default:
        panic("Invalid range for type CoherenceResponseType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
CoherenceResponseType
string_to_CoherenceResponseType(const std::string& str)
{
    if (str == "ACK") {
        return CoherenceResponseType_ACK;
    } else if (str == "ACK_SHARED") {
        return CoherenceResponseType_ACK_SHARED;
    } else if (str == "DATA") {
        return CoherenceResponseType_DATA;
    } else if (str == "DATA_SHARED") {
        return CoherenceResponseType_DATA_SHARED;
    } else if (str == "DATA_EXCLUSIVE") {
        return CoherenceResponseType_DATA_EXCLUSIVE;
    } else if (str == "WB_CLEAN") {
        return CoherenceResponseType_WB_CLEAN;
    } else if (str == "WB_DIRTY") {
        return CoherenceResponseType_WB_DIRTY;
    } else if (str == "WB_EXCLUSIVE_CLEAN") {
        return CoherenceResponseType_WB_EXCLUSIVE_CLEAN;
    } else if (str == "WB_EXCLUSIVE_DIRTY") {
        return CoherenceResponseType_WB_EXCLUSIVE_DIRTY;
    } else if (str == "UNBLOCK") {
        return CoherenceResponseType_UNBLOCK;
    } else if (str == "UNBLOCKS") {
        return CoherenceResponseType_UNBLOCKS;
    } else if (str == "UNBLOCKM") {
        return CoherenceResponseType_UNBLOCKM;
    } else if (str == "NULL") {
        return CoherenceResponseType_NULL;
    } else {
        panic("Invalid string conversion for %s, type CoherenceResponseType", str);
    }
}

// Code to increment an enumeration type
CoherenceResponseType&
operator++(CoherenceResponseType& e)
{
    assert(e < CoherenceResponseType_NUM);
    return e = CoherenceResponseType(e+1);
}
} // namespace ruby
} // namespace gem5
