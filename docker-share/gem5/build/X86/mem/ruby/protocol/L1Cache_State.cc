/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/L1Cache_State.hh"

namespace gem5
{

namespace ruby
{

// Code to convert the current state to an access permission
AccessPermission L1Cache_State_to_permission(const L1Cache_State& obj)
{
    switch(obj) {
      case L1Cache_State_I:
        return AccessPermission_Invalid;
      case L1Cache_State_S:
        return AccessPermission_Read_Only;
      case L1Cache_State_O:
        return AccessPermission_Read_Only;
      case L1Cache_State_M:
        return AccessPermission_Read_Only;
      case L1Cache_State_MM:
        return AccessPermission_Read_Write;
      case L1Cache_State_IR:
        return AccessPermission_Invalid;
      case L1Cache_State_SR:
        return AccessPermission_Read_Only;
      case L1Cache_State_OR:
        return AccessPermission_Read_Only;
      case L1Cache_State_MR:
        return AccessPermission_Read_Only;
      case L1Cache_State_MMR:
        return AccessPermission_Read_Write;
      case L1Cache_State_IM:
        return AccessPermission_Busy;
      case L1Cache_State_SM:
        return AccessPermission_Read_Only;
      case L1Cache_State_OM:
        return AccessPermission_Read_Only;
      case L1Cache_State_ISM:
        return AccessPermission_Read_Only;
      case L1Cache_State_M_W:
        return AccessPermission_Read_Only;
      case L1Cache_State_MM_W:
        return AccessPermission_Read_Write;
      case L1Cache_State_IS:
        return AccessPermission_Busy;
      case L1Cache_State_SS:
        return AccessPermission_Read_Only;
      case L1Cache_State_OI:
        return AccessPermission_Busy;
      case L1Cache_State_MI:
        return AccessPermission_Busy;
      case L1Cache_State_II:
        return AccessPermission_Busy;
      case L1Cache_State_ST:
        return AccessPermission_Busy;
      case L1Cache_State_OT:
        return AccessPermission_Busy;
      case L1Cache_State_MT:
        return AccessPermission_Busy;
      case L1Cache_State_MMT:
        return AccessPermission_Busy;
      case L1Cache_State_MI_F:
        return AccessPermission_Busy;
      case L1Cache_State_MM_F:
        return AccessPermission_Busy;
      case L1Cache_State_IM_F:
        return AccessPermission_Busy;
      case L1Cache_State_ISM_F:
        return AccessPermission_Read_Only;
      case L1Cache_State_SM_F:
        return AccessPermission_Read_Only;
      case L1Cache_State_OM_F:
        return AccessPermission_Read_Only;
      case L1Cache_State_MM_WF:
        return AccessPermission_Busy;
      default:
        panic("Unknown state access permission converstion for L1Cache_State");
    }
    // Appease the compiler since this function has a return value
    return AccessPermission_Invalid;
}

} // namespace ruby
} // namespace gem5

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const L1Cache_State& obj)
{
    out << L1Cache_State_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
L1Cache_State_to_string(const L1Cache_State& obj)
{
    switch(obj) {
      case L1Cache_State_I:
        return "I";
      case L1Cache_State_S:
        return "S";
      case L1Cache_State_O:
        return "O";
      case L1Cache_State_M:
        return "M";
      case L1Cache_State_MM:
        return "MM";
      case L1Cache_State_IR:
        return "IR";
      case L1Cache_State_SR:
        return "SR";
      case L1Cache_State_OR:
        return "OR";
      case L1Cache_State_MR:
        return "MR";
      case L1Cache_State_MMR:
        return "MMR";
      case L1Cache_State_IM:
        return "IM";
      case L1Cache_State_SM:
        return "SM";
      case L1Cache_State_OM:
        return "OM";
      case L1Cache_State_ISM:
        return "ISM";
      case L1Cache_State_M_W:
        return "M_W";
      case L1Cache_State_MM_W:
        return "MM_W";
      case L1Cache_State_IS:
        return "IS";
      case L1Cache_State_SS:
        return "SS";
      case L1Cache_State_OI:
        return "OI";
      case L1Cache_State_MI:
        return "MI";
      case L1Cache_State_II:
        return "II";
      case L1Cache_State_ST:
        return "ST";
      case L1Cache_State_OT:
        return "OT";
      case L1Cache_State_MT:
        return "MT";
      case L1Cache_State_MMT:
        return "MMT";
      case L1Cache_State_MI_F:
        return "MI_F";
      case L1Cache_State_MM_F:
        return "MM_F";
      case L1Cache_State_IM_F:
        return "IM_F";
      case L1Cache_State_ISM_F:
        return "ISM_F";
      case L1Cache_State_SM_F:
        return "SM_F";
      case L1Cache_State_OM_F:
        return "OM_F";
      case L1Cache_State_MM_WF:
        return "MM_WF";
      default:
        panic("Invalid range for type L1Cache_State");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
L1Cache_State
string_to_L1Cache_State(const std::string& str)
{
    if (str == "I") {
        return L1Cache_State_I;
    } else if (str == "S") {
        return L1Cache_State_S;
    } else if (str == "O") {
        return L1Cache_State_O;
    } else if (str == "M") {
        return L1Cache_State_M;
    } else if (str == "MM") {
        return L1Cache_State_MM;
    } else if (str == "IR") {
        return L1Cache_State_IR;
    } else if (str == "SR") {
        return L1Cache_State_SR;
    } else if (str == "OR") {
        return L1Cache_State_OR;
    } else if (str == "MR") {
        return L1Cache_State_MR;
    } else if (str == "MMR") {
        return L1Cache_State_MMR;
    } else if (str == "IM") {
        return L1Cache_State_IM;
    } else if (str == "SM") {
        return L1Cache_State_SM;
    } else if (str == "OM") {
        return L1Cache_State_OM;
    } else if (str == "ISM") {
        return L1Cache_State_ISM;
    } else if (str == "M_W") {
        return L1Cache_State_M_W;
    } else if (str == "MM_W") {
        return L1Cache_State_MM_W;
    } else if (str == "IS") {
        return L1Cache_State_IS;
    } else if (str == "SS") {
        return L1Cache_State_SS;
    } else if (str == "OI") {
        return L1Cache_State_OI;
    } else if (str == "MI") {
        return L1Cache_State_MI;
    } else if (str == "II") {
        return L1Cache_State_II;
    } else if (str == "ST") {
        return L1Cache_State_ST;
    } else if (str == "OT") {
        return L1Cache_State_OT;
    } else if (str == "MT") {
        return L1Cache_State_MT;
    } else if (str == "MMT") {
        return L1Cache_State_MMT;
    } else if (str == "MI_F") {
        return L1Cache_State_MI_F;
    } else if (str == "MM_F") {
        return L1Cache_State_MM_F;
    } else if (str == "IM_F") {
        return L1Cache_State_IM_F;
    } else if (str == "ISM_F") {
        return L1Cache_State_ISM_F;
    } else if (str == "SM_F") {
        return L1Cache_State_SM_F;
    } else if (str == "OM_F") {
        return L1Cache_State_OM_F;
    } else if (str == "MM_WF") {
        return L1Cache_State_MM_WF;
    } else {
        panic("Invalid string conversion for %s, type L1Cache_State", str);
    }
}

// Code to increment an enumeration type
L1Cache_State&
operator++(L1Cache_State& e)
{
    assert(e < L1Cache_State_NUM);
    return e = L1Cache_State(e+1);
}
} // namespace ruby
} // namespace gem5
