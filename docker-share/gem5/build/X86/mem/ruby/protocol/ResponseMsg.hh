/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:443
 */

#ifndef __ResponseMsg_HH__
#define __ResponseMsg_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CoherenceResponseType.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/DataBlock.hh"
#include "mem/ruby/protocol/MessageSizeType.hh"
#include "mem/ruby/protocol/Message.hh"
namespace gem5
{

namespace ruby
{

class ResponseMsg :  public Message
{
  public:
    ResponseMsg
(Tick curTime) : Message(curTime) {
        // m_addr has no default
        m_Type = CoherenceResponseType_NUM;
         // default value of CoherenceResponseType
        // m_Sender has no default
        // m_CurOwner has no default
        // m_Destination has no default
        // m_DataBlk has no default
        m_Dirty = false;
         // default value of bool
        m_Acks = 0; // default for this field
        m_MessageSize = MessageSizeType_NUM;
         // default value of MessageSizeType
        m_InitialRequestTime = Cycles(0); // default for this field
        m_ForwardRequestTime = Cycles(0); // default for this field
        m_SilentAcks = 0; // default for this field
    }
    ResponseMsg(const ResponseMsg&) = default;
    ResponseMsg
    &operator=(const ResponseMsg&) = default;
    ResponseMsg(const Tick curTime, const Addr& local_addr, const CoherenceResponseType& local_Type, const MachineID& local_Sender, const MachineID& local_CurOwner, const NetDest& local_Destination, const DataBlock& local_DataBlk, const bool& local_Dirty, const int& local_Acks, const MessageSizeType& local_MessageSize, const Cycles& local_InitialRequestTime, const Cycles& local_ForwardRequestTime, const int& local_SilentAcks)
        : Message(curTime)
    {
        m_addr = local_addr;
        m_Type = local_Type;
        m_Sender = local_Sender;
        m_CurOwner = local_CurOwner;
        m_Destination = local_Destination;
        m_DataBlk = local_DataBlk;
        m_Dirty = local_Dirty;
        m_Acks = local_Acks;
        m_MessageSize = local_MessageSize;
        m_InitialRequestTime = local_InitialRequestTime;
        m_ForwardRequestTime = local_ForwardRequestTime;
        m_SilentAcks = local_SilentAcks;
    }
    MsgPtr
    clone() const
    {
         return std::shared_ptr<Message>(new ResponseMsg(*this));
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for Type field.
     *  \return Type field
     */
    const CoherenceResponseType&
    getType() const
    {
        return m_Type;
    }
    /** \brief Const accessor method for Sender field.
     *  \return Sender field
     */
    const MachineID&
    getSender() const
    {
        return m_Sender;
    }
    /** \brief Const accessor method for CurOwner field.
     *  \return CurOwner field
     */
    const MachineID&
    getCurOwner() const
    {
        return m_CurOwner;
    }
    /** \brief Const accessor method for Destination field.
     *  \return Destination field
     */
    const NetDest&
    getDestination() const
    {
        return m_Destination;
    }
    /** \brief Const accessor method for DataBlk field.
     *  \return DataBlk field
     */
    const DataBlock&
    getDataBlk() const
    {
        return m_DataBlk;
    }
    /** \brief Const accessor method for Dirty field.
     *  \return Dirty field
     */
    const bool&
    getDirty() const
    {
        return m_Dirty;
    }
    /** \brief Const accessor method for Acks field.
     *  \return Acks field
     */
    const int&
    getAcks() const
    {
        return m_Acks;
    }
    /** \brief Const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    const MessageSizeType&
    getMessageSize() const
    {
        return m_MessageSize;
    }
    /** \brief Const accessor method for InitialRequestTime field.
     *  \return InitialRequestTime field
     */
    const Cycles&
    getInitialRequestTime() const
    {
        return m_InitialRequestTime;
    }
    /** \brief Const accessor method for ForwardRequestTime field.
     *  \return ForwardRequestTime field
     */
    const Cycles&
    getForwardRequestTime() const
    {
        return m_ForwardRequestTime;
    }
    /** \brief Const accessor method for SilentAcks field.
     *  \return SilentAcks field
     */
    const int&
    getSilentAcks() const
    {
        return m_SilentAcks;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for Type field.
     *  \return Type field
     */
    CoherenceResponseType&
    getType()
    {
        return m_Type;
    }
    /** \brief Non-const accessor method for Sender field.
     *  \return Sender field
     */
    MachineID&
    getSender()
    {
        return m_Sender;
    }
    /** \brief Non-const accessor method for CurOwner field.
     *  \return CurOwner field
     */
    MachineID&
    getCurOwner()
    {
        return m_CurOwner;
    }
    /** \brief Non-const accessor method for Destination field.
     *  \return Destination field
     */
    NetDest&
    getDestination()
    {
        return m_Destination;
    }
    /** \brief Non-const accessor method for DataBlk field.
     *  \return DataBlk field
     */
    DataBlock&
    getDataBlk()
    {
        return m_DataBlk;
    }
    /** \brief Non-const accessor method for Dirty field.
     *  \return Dirty field
     */
    bool&
    getDirty()
    {
        return m_Dirty;
    }
    /** \brief Non-const accessor method for Acks field.
     *  \return Acks field
     */
    int&
    getAcks()
    {
        return m_Acks;
    }
    /** \brief Non-const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    MessageSizeType&
    getMessageSize()
    {
        return m_MessageSize;
    }
    /** \brief Non-const accessor method for InitialRequestTime field.
     *  \return InitialRequestTime field
     */
    Cycles&
    getInitialRequestTime()
    {
        return m_InitialRequestTime;
    }
    /** \brief Non-const accessor method for ForwardRequestTime field.
     *  \return ForwardRequestTime field
     */
    Cycles&
    getForwardRequestTime()
    {
        return m_ForwardRequestTime;
    }
    /** \brief Non-const accessor method for SilentAcks field.
     *  \return SilentAcks field
     */
    int&
    getSilentAcks()
    {
        return m_SilentAcks;
    }
    // Mutator methods for each field
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for Type field */
    void
    setType(const CoherenceResponseType& local_Type)
    {
        m_Type = local_Type;
    }
    /** \brief Mutator method for Sender field */
    void
    setSender(const MachineID& local_Sender)
    {
        m_Sender = local_Sender;
    }
    /** \brief Mutator method for CurOwner field */
    void
    setCurOwner(const MachineID& local_CurOwner)
    {
        m_CurOwner = local_CurOwner;
    }
    /** \brief Mutator method for Destination field */
    void
    setDestination(const NetDest& local_Destination)
    {
        m_Destination = local_Destination;
    }
    /** \brief Mutator method for DataBlk field */
    void
    setDataBlk(const DataBlock& local_DataBlk)
    {
        m_DataBlk = local_DataBlk;
    }
    /** \brief Mutator method for Dirty field */
    void
    setDirty(const bool& local_Dirty)
    {
        m_Dirty = local_Dirty;
    }
    /** \brief Mutator method for Acks field */
    void
    setAcks(const int& local_Acks)
    {
        m_Acks = local_Acks;
    }
    /** \brief Mutator method for MessageSize field */
    void
    setMessageSize(const MessageSizeType& local_MessageSize)
    {
        m_MessageSize = local_MessageSize;
    }
    /** \brief Mutator method for InitialRequestTime field */
    void
    setInitialRequestTime(const Cycles& local_InitialRequestTime)
    {
        m_InitialRequestTime = local_InitialRequestTime;
    }
    /** \brief Mutator method for ForwardRequestTime field */
    void
    setForwardRequestTime(const Cycles& local_ForwardRequestTime)
    {
        m_ForwardRequestTime = local_ForwardRequestTime;
    }
    /** \brief Mutator method for SilentAcks field */
    void
    setSilentAcks(const int& local_SilentAcks)
    {
        m_SilentAcks = local_SilentAcks;
    }
    void print(std::ostream& out) const;
  //private:
    /** Physical address for this request */
    Addr m_addr;
    /** Type of response (Ack, Data, etc) */
    CoherenceResponseType m_Type;
    /** Node who sent the data */
    MachineID m_Sender;
    /** current owner of the block, used for UnblockS responses */
    MachineID m_CurOwner;
    /** Node to whom the data is sent */
    NetDest m_Destination;
    /** data for the cache line */
    DataBlock m_DataBlk;
    /** Is the data dirty (different than memory)? */
    bool m_Dirty;
    /** How many messages this counts as */
    int m_Acks;
    /** size category of the message */
    MessageSizeType m_MessageSize;
    /** time the initial requests was sent from the L1Cache */
    Cycles m_InitialRequestTime;
    /** time the dir forwarded the request */
    Cycles m_ForwardRequestTime;
    /** silent acks from the full-bit directory */
    int m_SilentAcks;
    bool functionalRead(Packet* param_pkt);
    bool functionalWrite(Packet* param_pkt);
};
inline ::std::ostream&
operator<<(::std::ostream& out, const ResponseMsg& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __ResponseMsg_HH__
