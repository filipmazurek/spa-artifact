/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /shared/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/Directory_Event.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const Directory_Event& obj)
{
    out << Directory_Event_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
Directory_Event_to_string(const Directory_Event& obj)
{
    switch(obj) {
      case Directory_Event_GETX:
        return "GETX";
      case Directory_Event_GETS:
        return "GETS";
      case Directory_Event_PUT:
        return "PUT";
      case Directory_Event_Unblock:
        return "Unblock";
      case Directory_Event_UnblockS:
        return "UnblockS";
      case Directory_Event_UnblockM:
        return "UnblockM";
      case Directory_Event_Writeback_Clean:
        return "Writeback_Clean";
      case Directory_Event_Writeback_Dirty:
        return "Writeback_Dirty";
      case Directory_Event_Writeback_Exclusive_Clean:
        return "Writeback_Exclusive_Clean";
      case Directory_Event_Writeback_Exclusive_Dirty:
        return "Writeback_Exclusive_Dirty";
      case Directory_Event_Pf_Replacement:
        return "Pf_Replacement";
      case Directory_Event_DMA_READ:
        return "DMA_READ";
      case Directory_Event_DMA_WRITE:
        return "DMA_WRITE";
      case Directory_Event_Memory_Data:
        return "Memory_Data";
      case Directory_Event_Memory_Ack:
        return "Memory_Ack";
      case Directory_Event_Ack:
        return "Ack";
      case Directory_Event_Shared_Ack:
        return "Shared_Ack";
      case Directory_Event_Shared_Data:
        return "Shared_Data";
      case Directory_Event_Data:
        return "Data";
      case Directory_Event_Exclusive_Data:
        return "Exclusive_Data";
      case Directory_Event_All_acks_and_shared_data:
        return "All_acks_and_shared_data";
      case Directory_Event_All_acks_and_owner_data:
        return "All_acks_and_owner_data";
      case Directory_Event_All_acks_and_data_no_sharers:
        return "All_acks_and_data_no_sharers";
      case Directory_Event_All_Unblocks:
        return "All_Unblocks";
      case Directory_Event_GETF:
        return "GETF";
      case Directory_Event_PUTF:
        return "PUTF";
      default:
        panic("Invalid range for type Directory_Event");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
Directory_Event
string_to_Directory_Event(const std::string& str)
{
    if (str == "GETX") {
        return Directory_Event_GETX;
    } else if (str == "GETS") {
        return Directory_Event_GETS;
    } else if (str == "PUT") {
        return Directory_Event_PUT;
    } else if (str == "Unblock") {
        return Directory_Event_Unblock;
    } else if (str == "UnblockS") {
        return Directory_Event_UnblockS;
    } else if (str == "UnblockM") {
        return Directory_Event_UnblockM;
    } else if (str == "Writeback_Clean") {
        return Directory_Event_Writeback_Clean;
    } else if (str == "Writeback_Dirty") {
        return Directory_Event_Writeback_Dirty;
    } else if (str == "Writeback_Exclusive_Clean") {
        return Directory_Event_Writeback_Exclusive_Clean;
    } else if (str == "Writeback_Exclusive_Dirty") {
        return Directory_Event_Writeback_Exclusive_Dirty;
    } else if (str == "Pf_Replacement") {
        return Directory_Event_Pf_Replacement;
    } else if (str == "DMA_READ") {
        return Directory_Event_DMA_READ;
    } else if (str == "DMA_WRITE") {
        return Directory_Event_DMA_WRITE;
    } else if (str == "Memory_Data") {
        return Directory_Event_Memory_Data;
    } else if (str == "Memory_Ack") {
        return Directory_Event_Memory_Ack;
    } else if (str == "Ack") {
        return Directory_Event_Ack;
    } else if (str == "Shared_Ack") {
        return Directory_Event_Shared_Ack;
    } else if (str == "Shared_Data") {
        return Directory_Event_Shared_Data;
    } else if (str == "Data") {
        return Directory_Event_Data;
    } else if (str == "Exclusive_Data") {
        return Directory_Event_Exclusive_Data;
    } else if (str == "All_acks_and_shared_data") {
        return Directory_Event_All_acks_and_shared_data;
    } else if (str == "All_acks_and_owner_data") {
        return Directory_Event_All_acks_and_owner_data;
    } else if (str == "All_acks_and_data_no_sharers") {
        return Directory_Event_All_acks_and_data_no_sharers;
    } else if (str == "All_Unblocks") {
        return Directory_Event_All_Unblocks;
    } else if (str == "GETF") {
        return Directory_Event_GETF;
    } else if (str == "PUTF") {
        return Directory_Event_PUTF;
    } else {
        panic("Invalid string conversion for %s, type Directory_Event", str);
    }
}

// Code to increment an enumeration type
Directory_Event&
operator++(Directory_Event& e)
{
    assert(e < Directory_Event_NUM);
    return e = Directory_Event(e+1);
}
} // namespace ruby
} // namespace gem5
