// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoMessage {

namespace {

const ::google::protobuf::Descriptor* PacketHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* PacketHeader_IdStringEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeader_IdStringEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  PacketHeader_descriptor_ = file->message_type(0);
  static const int PacketHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, tick_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, id_strings_),
  };
  PacketHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PacketHeader_descriptor_,
      PacketHeader::default_instance_,
      PacketHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(PacketHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _internal_metadata_),
      -1);
  PacketHeader_IdStringEntry_descriptor_ = PacketHeader_descriptor_->nested_type(0);
  static const int PacketHeader_IdStringEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader_IdStringEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader_IdStringEntry, value_),
  };
  PacketHeader_IdStringEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PacketHeader_IdStringEntry_descriptor_,
      PacketHeader_IdStringEntry::default_instance_,
      PacketHeader_IdStringEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader_IdStringEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(PacketHeader_IdStringEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader_IdStringEntry, _internal_metadata_),
      -1);
  Packet_descriptor_ = file->message_type(1);
  static const int Packet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, pkt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, pc_),
  };
  Packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PacketHeader_descriptor_, &PacketHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PacketHeader_IdStringEntry_descriptor_, &PacketHeader_IdStringEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Packet_descriptor_, &Packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete PacketHeader::default_instance_;
  delete PacketHeader_reflection_;
  delete PacketHeader_IdStringEntry::default_instance_;
  delete PacketHeader_IdStringEntry_reflection_;
  delete Packet::default_instance_;
  delete Packet_reflection_;
}

void protobuf_AddDesc_packet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\014ProtoMessage\"\254\001\n\014PacketH"
    "eader\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \001(\r:\0010\022\021\n"
    "\ttick_freq\030\003 \002(\004\022<\n\nid_strings\030\004 \003(\0132(.P"
    "rotoMessage.PacketHeader.IdStringEntry\032+"
    "\n\rIdStringEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 "
    "\001(\t\"j\n\006Packet\022\014\n\004tick\030\001 \002(\004\022\013\n\003cmd\030\002 \002(\r"
    "\022\014\n\004addr\030\003 \002(\004\022\014\n\004size\030\004 \002(\r\022\r\n\005flags\030\005 "
    "\001(\r\022\016\n\006pkt_id\030\006 \001(\004\022\n\n\002pc\030\007 \001(\004", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  PacketHeader::default_instance_ = new PacketHeader();
  PacketHeader_IdStringEntry::default_instance_ = new PacketHeader_IdStringEntry();
  Packet::default_instance_ = new Packet();
  PacketHeader::default_instance_->InitAsDefaultInstance();
  PacketHeader_IdStringEntry::default_instance_->InitAsDefaultInstance();
  Packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketHeader_IdStringEntry::kKeyFieldNumber;
const int PacketHeader_IdStringEntry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketHeader_IdStringEntry::PacketHeader_IdStringEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.PacketHeader.IdStringEntry)
}

void PacketHeader_IdStringEntry::InitAsDefaultInstance() {
}

PacketHeader_IdStringEntry::PacketHeader_IdStringEntry(const PacketHeader_IdStringEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.PacketHeader.IdStringEntry)
}

void PacketHeader_IdStringEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = 0u;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHeader_IdStringEntry::~PacketHeader_IdStringEntry() {
  // @@protoc_insertion_point(destructor:ProtoMessage.PacketHeader.IdStringEntry)
  SharedDtor();
}

void PacketHeader_IdStringEntry::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PacketHeader_IdStringEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeader_IdStringEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_IdStringEntry_descriptor_;
}

const PacketHeader_IdStringEntry& PacketHeader_IdStringEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

PacketHeader_IdStringEntry* PacketHeader_IdStringEntry::default_instance_ = NULL;

PacketHeader_IdStringEntry* PacketHeader_IdStringEntry::New(::google::protobuf::Arena* arena) const {
  PacketHeader_IdStringEntry* n = new PacketHeader_IdStringEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHeader_IdStringEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.PacketHeader.IdStringEntry)
  if (_has_bits_[0 / 32] & 3u) {
    key_ = 0u;
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PacketHeader_IdStringEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.PacketHeader.IdStringEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProtoMessage.PacketHeader.IdStringEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.PacketHeader.IdStringEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.PacketHeader.IdStringEntry)
  return false;
#undef DO_
}

void PacketHeader_IdStringEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.PacketHeader.IdStringEntry)
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProtoMessage.PacketHeader.IdStringEntry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.PacketHeader.IdStringEntry)
}

::google::protobuf::uint8* PacketHeader_IdStringEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.PacketHeader.IdStringEntry)
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProtoMessage.PacketHeader.IdStringEntry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.PacketHeader.IdStringEntry)
  return target;
}

int PacketHeader_IdStringEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.PacketHeader.IdStringEntry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeader_IdStringEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.PacketHeader.IdStringEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PacketHeader_IdStringEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketHeader_IdStringEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.PacketHeader.IdStringEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.PacketHeader.IdStringEntry)
    MergeFrom(*source);
  }
}

void PacketHeader_IdStringEntry::MergeFrom(const PacketHeader_IdStringEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.PacketHeader.IdStringEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PacketHeader_IdStringEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.PacketHeader.IdStringEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader_IdStringEntry::CopyFrom(const PacketHeader_IdStringEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.PacketHeader.IdStringEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader_IdStringEntry::IsInitialized() const {

  return true;
}

void PacketHeader_IdStringEntry::Swap(PacketHeader_IdStringEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHeader_IdStringEntry::InternalSwap(PacketHeader_IdStringEntry* other) {
  std::swap(key_, other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketHeader_IdStringEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeader_IdStringEntry_descriptor_;
  metadata.reflection = PacketHeader_IdStringEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketHeader::kObjIdFieldNumber;
const int PacketHeader::kVerFieldNumber;
const int PacketHeader::kTickFreqFieldNumber;
const int PacketHeader::kIdStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketHeader::PacketHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.PacketHeader)
}

void PacketHeader::InitAsDefaultInstance() {
}

PacketHeader::PacketHeader(const PacketHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.PacketHeader)
}

void PacketHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_ = 0u;
  tick_freq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:ProtoMessage.PacketHeader)
  SharedDtor();
}

void PacketHeader::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PacketHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_descriptor_;
}

const PacketHeader& PacketHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

PacketHeader* PacketHeader::default_instance_ = NULL;

PacketHeader* PacketHeader::New(::google::protobuf::Arena* arena) const {
  PacketHeader* n = new PacketHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.PacketHeader)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_obj_id()) {
      obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ver_ = 0u;
    tick_freq_ = GOOGLE_ULONGLONG(0);
  }
  id_strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.PacketHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string obj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProtoMessage.PacketHeader.obj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ver;
        break;
      }

      // optional uint32 ver = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tick_freq;
        break;
      }

      // required uint64 tick_freq = 3;
      case 3: {
        if (tag == 24) {
         parse_tick_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_freq_)));
          set_has_tick_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_strings;
        break;
      }

      // repeated .ProtoMessage.PacketHeader.IdStringEntry id_strings = 4;
      case 4: {
        if (tag == 34) {
         parse_id_strings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_id_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_id_strings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_id_strings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.PacketHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.PacketHeader)
  return false;
#undef DO_
}

void PacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.PacketHeader)
  // required string obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProtoMessage.PacketHeader.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj_id(), output);
  }

  // optional uint32 ver = 2 [default = 0];
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // required uint64 tick_freq = 3;
  if (has_tick_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tick_freq(), output);
  }

  // repeated .ProtoMessage.PacketHeader.IdStringEntry id_strings = 4;
  for (unsigned int i = 0, n = this->id_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->id_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.PacketHeader)
}

::google::protobuf::uint8* PacketHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.PacketHeader)
  // required string obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProtoMessage.PacketHeader.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj_id(), target);
  }

  // optional uint32 ver = 2 [default = 0];
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // required uint64 tick_freq = 3;
  if (has_tick_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tick_freq(), target);
  }

  // repeated .ProtoMessage.PacketHeader.IdStringEntry id_strings = 4;
  for (unsigned int i = 0, n = this->id_strings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->id_strings(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.PacketHeader)
  return target;
}

int PacketHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.PacketHeader)
  int total_size = 0;

  if (has_obj_id()) {
    // required string obj_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  if (has_tick_freq()) {
    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick_freq());
  }

  return total_size;
}
int PacketHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.PacketHeader)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string obj_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());

    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick_freq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 ver = 2 [default = 0];
  if (has_ver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());
  }

  // repeated .ProtoMessage.PacketHeader.IdStringEntry id_strings = 4;
  total_size += 1 * this->id_strings_size();
  for (int i = 0; i < this->id_strings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_strings(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.PacketHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PacketHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.PacketHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.PacketHeader)
    MergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.PacketHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  id_strings_.MergeFrom(from.id_strings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_has_obj_id();
      obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_tick_freq()) {
      set_tick_freq(from.tick_freq());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void PacketHeader::Swap(PacketHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHeader::InternalSwap(PacketHeader* other) {
  obj_id_.Swap(&other->obj_id_);
  std::swap(ver_, other->ver_);
  std::swap(tick_freq_, other->tick_freq_);
  id_strings_.UnsafeArenaSwap(&other->id_strings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeader_descriptor_;
  metadata.reflection = PacketHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketHeader_IdStringEntry

// optional uint32 key = 1;
bool PacketHeader_IdStringEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketHeader_IdStringEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketHeader_IdStringEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketHeader_IdStringEntry::clear_key() {
  key_ = 0u;
  clear_has_key();
}
 ::google::protobuf::uint32 PacketHeader_IdStringEntry::key() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.IdStringEntry.key)
  return key_;
}
 void PacketHeader_IdStringEntry::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.IdStringEntry.key)
}

// optional string value = 2;
bool PacketHeader_IdStringEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketHeader_IdStringEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketHeader_IdStringEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketHeader_IdStringEntry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& PacketHeader_IdStringEntry::value() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.IdStringEntry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHeader_IdStringEntry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.IdStringEntry.value)
}
 void PacketHeader_IdStringEntry::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtoMessage.PacketHeader.IdStringEntry.value)
}
 void PacketHeader_IdStringEntry::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtoMessage.PacketHeader.IdStringEntry.value)
}
 ::std::string* PacketHeader_IdStringEntry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ProtoMessage.PacketHeader.IdStringEntry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHeader_IdStringEntry::release_value() {
  // @@protoc_insertion_point(field_release:ProtoMessage.PacketHeader.IdStringEntry.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHeader_IdStringEntry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.PacketHeader.IdStringEntry.value)
}

// -------------------------------------------------------------------

// PacketHeader

// required string obj_id = 1;
bool PacketHeader::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketHeader::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketHeader::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketHeader::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj_id();
}
 const ::std::string& PacketHeader::obj_id() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.obj_id)
  return obj_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHeader::set_obj_id(const ::std::string& value) {
  set_has_obj_id();
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.obj_id)
}
 void PacketHeader::set_obj_id(const char* value) {
  set_has_obj_id();
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtoMessage.PacketHeader.obj_id)
}
 void PacketHeader::set_obj_id(const char* value, size_t size) {
  set_has_obj_id();
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtoMessage.PacketHeader.obj_id)
}
 ::std::string* PacketHeader::mutable_obj_id() {
  set_has_obj_id();
  // @@protoc_insertion_point(field_mutable:ProtoMessage.PacketHeader.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHeader::release_obj_id() {
  // @@protoc_insertion_point(field_release:ProtoMessage.PacketHeader.obj_id)
  clear_has_obj_id();
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHeader::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    set_has_obj_id();
  } else {
    clear_has_obj_id();
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.PacketHeader.obj_id)
}

// optional uint32 ver = 2 [default = 0];
bool PacketHeader::has_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketHeader::set_has_ver() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketHeader::clear_has_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketHeader::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
 ::google::protobuf::uint32 PacketHeader::ver() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.ver)
  return ver_;
}
 void PacketHeader::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.ver)
}

// required uint64 tick_freq = 3;
bool PacketHeader::has_tick_freq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketHeader::set_has_tick_freq() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketHeader::clear_has_tick_freq() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketHeader::clear_tick_freq() {
  tick_freq_ = GOOGLE_ULONGLONG(0);
  clear_has_tick_freq();
}
 ::google::protobuf::uint64 PacketHeader::tick_freq() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.tick_freq)
  return tick_freq_;
}
 void PacketHeader::set_tick_freq(::google::protobuf::uint64 value) {
  set_has_tick_freq();
  tick_freq_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.tick_freq)
}

// repeated .ProtoMessage.PacketHeader.IdStringEntry id_strings = 4;
int PacketHeader::id_strings_size() const {
  return id_strings_.size();
}
void PacketHeader::clear_id_strings() {
  id_strings_.Clear();
}
const ::ProtoMessage::PacketHeader_IdStringEntry& PacketHeader::id_strings(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.id_strings)
  return id_strings_.Get(index);
}
::ProtoMessage::PacketHeader_IdStringEntry* PacketHeader::mutable_id_strings(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.PacketHeader.id_strings)
  return id_strings_.Mutable(index);
}
::ProtoMessage::PacketHeader_IdStringEntry* PacketHeader::add_id_strings() {
  // @@protoc_insertion_point(field_add:ProtoMessage.PacketHeader.id_strings)
  return id_strings_.Add();
}
::google::protobuf::RepeatedPtrField< ::ProtoMessage::PacketHeader_IdStringEntry >*
PacketHeader::mutable_id_strings() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.PacketHeader.id_strings)
  return &id_strings_;
}
const ::google::protobuf::RepeatedPtrField< ::ProtoMessage::PacketHeader_IdStringEntry >&
PacketHeader::id_strings() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.PacketHeader.id_strings)
  return id_strings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kTickFieldNumber;
const int Packet::kCmdFieldNumber;
const int Packet::kAddrFieldNumber;
const int Packet::kSizeFieldNumber;
const int Packet::kFlagsFieldNumber;
const int Packet::kPktIdFieldNumber;
const int Packet::kPcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage.Packet)
}

void Packet::InitAsDefaultInstance() {
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  tick_ = GOOGLE_ULONGLONG(0);
  cmd_ = 0u;
  addr_ = GOOGLE_ULONGLONG(0);
  size_ = 0u;
  flags_ = 0u;
  pkt_id_ = GOOGLE_ULONGLONG(0);
  pc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Packet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Packet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Packet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(tick_, flags_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addr;
        break;
      }

      // required uint64 addr = 3;
      case 3: {
        if (tag == 24) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (tag == 40) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pkt_id;
        break;
      }

      // optional uint64 pkt_id = 6;
      case 6: {
        if (tag == 48) {
         parse_pkt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkt_id_)));
          set_has_pkt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pc;
        break;
      }

      // optional uint64 pc = 7;
      case 7: {
        if (tag == 56) {
         parse_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage.Packet)
  // required uint64 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tick(), output);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  // required uint64 addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->addr(), output);
  }

  // required uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint64 pkt_id = 6;
  if (has_pkt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pkt_id(), output);
  }

  // optional uint64 pc = 7;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Packet)
  // required uint64 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tick(), target);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  // required uint64 addr = 3;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->addr(), target);
  }

  // required uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional uint64 pkt_id = 6;
  if (has_pkt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pkt_id(), target);
  }

  // optional uint64 pc = 7;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Packet)
  return target;
}

int Packet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.Packet)
  int total_size = 0;

  if (has_tick()) {
    // required uint64 tick = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick());
  }

  if (has_cmd()) {
    // required uint32 cmd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd());
  }

  if (has_addr()) {
    // required uint64 addr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_size()) {
    // required uint32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  return total_size;
}
int Packet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Packet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 tick = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick());

    // required uint32 cmd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd());

    // required uint64 addr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required uint32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 112u) {
    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint64 pkt_id = 6;
    if (has_pkt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkt_id());
    }

    // optional uint64 pc = 7;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Packet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_pkt_id()) {
      set_pkt_id(from.pkt_id());
    }
    if (from.has_pc()) {
      set_pc(from.pc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  std::swap(tick_, other->tick_);
  std::swap(cmd_, other->cmd_);
  std::swap(addr_, other->addr_);
  std::swap(size_, other->size_);
  std::swap(flags_, other->flags_);
  std::swap(pkt_id_, other->pkt_id_);
  std::swap(pc_, other->pc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// required uint64 tick = 1;
bool Packet::has_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Packet::set_has_tick() {
  _has_bits_[0] |= 0x00000001u;
}
void Packet::clear_has_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
void Packet::clear_tick() {
  tick_ = GOOGLE_ULONGLONG(0);
  clear_has_tick();
}
 ::google::protobuf::uint64 Packet::tick() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.tick)
  return tick_;
}
 void Packet::set_tick(::google::protobuf::uint64 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.tick)
}

// required uint32 cmd = 2;
bool Packet::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Packet::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void Packet::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Packet::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
 ::google::protobuf::uint32 Packet::cmd() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.cmd)
  return cmd_;
}
 void Packet::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.cmd)
}

// required uint64 addr = 3;
bool Packet::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Packet::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
void Packet::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
void Packet::clear_addr() {
  addr_ = GOOGLE_ULONGLONG(0);
  clear_has_addr();
}
 ::google::protobuf::uint64 Packet::addr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.addr)
  return addr_;
}
 void Packet::set_addr(::google::protobuf::uint64 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.addr)
}

// required uint32 size = 4;
bool Packet::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Packet::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Packet::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Packet::clear_size() {
  size_ = 0u;
  clear_has_size();
}
 ::google::protobuf::uint32 Packet::size() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.size)
  return size_;
}
 void Packet::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.size)
}

// optional uint32 flags = 5;
bool Packet::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Packet::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void Packet::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void Packet::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
 ::google::protobuf::uint32 Packet::flags() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.flags)
  return flags_;
}
 void Packet::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.flags)
}

// optional uint64 pkt_id = 6;
bool Packet::has_pkt_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Packet::set_has_pkt_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Packet::clear_has_pkt_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Packet::clear_pkt_id() {
  pkt_id_ = GOOGLE_ULONGLONG(0);
  clear_has_pkt_id();
}
 ::google::protobuf::uint64 Packet::pkt_id() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.pkt_id)
  return pkt_id_;
}
 void Packet::set_pkt_id(::google::protobuf::uint64 value) {
  set_has_pkt_id();
  pkt_id_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.pkt_id)
}

// optional uint64 pc = 7;
bool Packet::has_pc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Packet::set_has_pc() {
  _has_bits_[0] |= 0x00000040u;
}
void Packet::clear_has_pc() {
  _has_bits_[0] &= ~0x00000040u;
}
void Packet::clear_pc() {
  pc_ = GOOGLE_ULONGLONG(0);
  clear_has_pc();
}
 ::google::protobuf::uint64 Packet::pc() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.pc)
  return pc_;
}
 void Packet::set_pc(::google::protobuf::uint64 value) {
  set_has_pc();
  pc_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.pc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMessage

// @@protoc_insertion_point(global_scope)
