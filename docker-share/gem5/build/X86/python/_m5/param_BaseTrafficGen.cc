/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BaseTrafficGen.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/testers/traffic_gen/traffic_gen.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include "enums/StreamGenType.hh"
#include "sim/system.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BaseTrafficGen");
    py::class_<BaseTrafficGenParams, ClockedObjectParams, std::unique_ptr<BaseTrafficGenParams, py::nodelete>>(m, "BaseTrafficGenParams")
        .def_readwrite("cpu_id", &BaseTrafficGenParams::cpu_id)
        .def_readwrite("elastic_req", &BaseTrafficGenParams::elastic_req)
        .def_readwrite("max_outstanding_reqs", &BaseTrafficGenParams::max_outstanding_reqs)
        .def_readwrite("numThreads", &BaseTrafficGenParams::numThreads)
        .def_readwrite("progress_check", &BaseTrafficGenParams::progress_check)
        .def_readwrite("sids", &BaseTrafficGenParams::sids)
        .def_readwrite("socket_id", &BaseTrafficGenParams::socket_id)
        .def_readwrite("ssids", &BaseTrafficGenParams::ssids)
        .def_readwrite("stream_gen", &BaseTrafficGenParams::stream_gen)
        .def_readwrite("system", &BaseTrafficGenParams::system)
        .def_readwrite("port_port_connection_count", &BaseTrafficGenParams::port_port_connection_count)
        ;

    py::class_<gem5::BaseTrafficGen, gem5::ClockedObject, std::unique_ptr<gem5::BaseTrafficGen, py::nodelete>>(m, "gem5_COLONS_BaseTrafficGen")
        ;

}

static EmbeddedPyBind embed_obj("BaseTrafficGen", module_init, "ClockedObject");

} // namespace gem5
