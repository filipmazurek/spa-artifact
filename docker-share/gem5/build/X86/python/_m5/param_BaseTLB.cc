/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BaseTLB.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "arch/generic/tlb.hh"

#include "enums/TypeTLB.hh"
#include "arch/generic/tlb.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BaseTLB");
    py::class_<BaseTLBParams, SimObjectParams, std::unique_ptr<BaseTLBParams, py::nodelete>>(m, "BaseTLBParams")
        .def_readwrite("entry_type", &BaseTLBParams::entry_type)
        .def_readwrite("next_level", &BaseTLBParams::next_level)
        .def_readwrite("port_cpu_side_ports_connection_count", &BaseTLBParams::port_cpu_side_ports_connection_count)
        .def_readwrite("port_mem_side_port_connection_count", &BaseTLBParams::port_mem_side_port_connection_count)
        ;

    py::class_<gem5::BaseTLB, gem5::SimObject, std::unique_ptr<gem5::BaseTLB, py::nodelete>>(m, "gem5_COLONS_BaseTLB")
        ;

}

static EmbeddedPyBind embed_obj("BaseTLB", module_init, "SimObject");

} // namespace gem5
