/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/LoopPredictor.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/pred/loop_predictor.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_LoopPredictor");
    py::class_<LoopPredictorParams, SimObjectParams, std::unique_ptr<LoopPredictorParams, py::nodelete>>(m, "LoopPredictorParams")
        .def(py::init<>())
        .def("create", &LoopPredictorParams::create)
        .def_readwrite("initialLoopAge", &LoopPredictorParams::initialLoopAge)
        .def_readwrite("initialLoopIter", &LoopPredictorParams::initialLoopIter)
        .def_readwrite("logLoopTableAssoc", &LoopPredictorParams::logLoopTableAssoc)
        .def_readwrite("logSizeLoopPred", &LoopPredictorParams::logSizeLoopPred)
        .def_readwrite("loopTableAgeBits", &LoopPredictorParams::loopTableAgeBits)
        .def_readwrite("loopTableConfidenceBits", &LoopPredictorParams::loopTableConfidenceBits)
        .def_readwrite("loopTableIterBits", &LoopPredictorParams::loopTableIterBits)
        .def_readwrite("loopTableTagBits", &LoopPredictorParams::loopTableTagBits)
        .def_readwrite("optionalAgeReset", &LoopPredictorParams::optionalAgeReset)
        .def_readwrite("restrictAllocation", &LoopPredictorParams::restrictAllocation)
        .def_readwrite("useDirectionBit", &LoopPredictorParams::useDirectionBit)
        .def_readwrite("useHashing", &LoopPredictorParams::useHashing)
        .def_readwrite("useSpeculation", &LoopPredictorParams::useSpeculation)
        .def_readwrite("withLoopBits", &LoopPredictorParams::withLoopBits)
        ;

    py::class_<gem5::branch_prediction::LoopPredictor, gem5::SimObject, std::unique_ptr<gem5::branch_prediction::LoopPredictor, py::nodelete>>(m, "gem5_COLONS_branch_prediction_COLONS_LoopPredictor")
        ;

}

static EmbeddedPyBind embed_obj("LoopPredictor", module_init, "SimObject");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyLoopPredictorParamsClass
{
  public:
    gem5::branch_prediction::LoopPredictor *create() const;
};

template <class CxxClass, class Enable=void>
class DummyLoopPredictorShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyLoopPredictorShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const LoopPredictorParams &>>>
{
  public:
    using Params = LoopPredictorParams;
    static gem5::branch_prediction::LoopPredictor *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyLoopPredictorShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const LoopPredictorParams &>>>
{
  public:
    using Params = DummyLoopPredictorParamsClass;
    static gem5::branch_prediction::LoopPredictor *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::branch_prediction::LoopPredictor *
DummyLoopPredictorShunt<gem5::branch_prediction::LoopPredictor>::Params::create() const
{
    return DummyLoopPredictorShunt<gem5::branch_prediction::LoopPredictor>::create(*this);
}

} // namespace gem5
