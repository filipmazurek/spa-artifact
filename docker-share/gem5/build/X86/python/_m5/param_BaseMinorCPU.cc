/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BaseMinorCPU.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/minor/cpu.hh"

#include "cpu/pred/bpred_unit.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "cpu/minor/func_unit.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "enums/ThreadPolicy.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BaseMinorCPU");
    py::class_<BaseMinorCPUParams, BaseCPUParams, std::unique_ptr<BaseMinorCPUParams, py::nodelete>>(m, "BaseMinorCPUParams")
        .def(py::init<>())
        .def("create", &BaseMinorCPUParams::create)
        .def_readwrite("branchPred", &BaseMinorCPUParams::branchPred)
        .def_readwrite("decodeCycleInput", &BaseMinorCPUParams::decodeCycleInput)
        .def_readwrite("decodeInputBufferSize", &BaseMinorCPUParams::decodeInputBufferSize)
        .def_readwrite("decodeInputWidth", &BaseMinorCPUParams::decodeInputWidth)
        .def_readwrite("decodeToExecuteForwardDelay", &BaseMinorCPUParams::decodeToExecuteForwardDelay)
        .def_readwrite("enableIdling", &BaseMinorCPUParams::enableIdling)
        .def_readwrite("executeAllowEarlyMemoryIssue", &BaseMinorCPUParams::executeAllowEarlyMemoryIssue)
        .def_readwrite("executeBranchDelay", &BaseMinorCPUParams::executeBranchDelay)
        .def_readwrite("executeCommitLimit", &BaseMinorCPUParams::executeCommitLimit)
        .def_readwrite("executeCycleInput", &BaseMinorCPUParams::executeCycleInput)
        .def_readwrite("executeFuncUnits", &BaseMinorCPUParams::executeFuncUnits)
        .def_readwrite("executeInputBufferSize", &BaseMinorCPUParams::executeInputBufferSize)
        .def_readwrite("executeInputWidth", &BaseMinorCPUParams::executeInputWidth)
        .def_readwrite("executeIssueLimit", &BaseMinorCPUParams::executeIssueLimit)
        .def_readwrite("executeLSQMaxStoreBufferStoresPerCycle", &BaseMinorCPUParams::executeLSQMaxStoreBufferStoresPerCycle)
        .def_readwrite("executeLSQRequestsQueueSize", &BaseMinorCPUParams::executeLSQRequestsQueueSize)
        .def_readwrite("executeLSQStoreBufferSize", &BaseMinorCPUParams::executeLSQStoreBufferSize)
        .def_readwrite("executeLSQTransfersQueueSize", &BaseMinorCPUParams::executeLSQTransfersQueueSize)
        .def_readwrite("executeMaxAccessesInMemory", &BaseMinorCPUParams::executeMaxAccessesInMemory)
        .def_readwrite("executeMemoryCommitLimit", &BaseMinorCPUParams::executeMemoryCommitLimit)
        .def_readwrite("executeMemoryIssueLimit", &BaseMinorCPUParams::executeMemoryIssueLimit)
        .def_readwrite("executeMemoryWidth", &BaseMinorCPUParams::executeMemoryWidth)
        .def_readwrite("executeSetTraceTimeOnCommit", &BaseMinorCPUParams::executeSetTraceTimeOnCommit)
        .def_readwrite("executeSetTraceTimeOnIssue", &BaseMinorCPUParams::executeSetTraceTimeOnIssue)
        .def_readwrite("fetch1FetchLimit", &BaseMinorCPUParams::fetch1FetchLimit)
        .def_readwrite("fetch1LineSnapWidth", &BaseMinorCPUParams::fetch1LineSnapWidth)
        .def_readwrite("fetch1LineWidth", &BaseMinorCPUParams::fetch1LineWidth)
        .def_readwrite("fetch1ToFetch2BackwardDelay", &BaseMinorCPUParams::fetch1ToFetch2BackwardDelay)
        .def_readwrite("fetch1ToFetch2ForwardDelay", &BaseMinorCPUParams::fetch1ToFetch2ForwardDelay)
        .def_readwrite("fetch2CycleInput", &BaseMinorCPUParams::fetch2CycleInput)
        .def_readwrite("fetch2InputBufferSize", &BaseMinorCPUParams::fetch2InputBufferSize)
        .def_readwrite("fetch2ToDecodeForwardDelay", &BaseMinorCPUParams::fetch2ToDecodeForwardDelay)
        .def_readwrite("threadPolicy", &BaseMinorCPUParams::threadPolicy)
        ;

    py::class_<gem5::MinorCPU, gem5::BaseCPU, std::unique_ptr<gem5::MinorCPU, py::nodelete>>(m, "gem5_COLONS_MinorCPU")
        ;

}

static EmbeddedPyBind embed_obj("BaseMinorCPU", module_init, "BaseCPU");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyBaseMinorCPUParamsClass
{
  public:
    gem5::MinorCPU *create() const;
};

template <class CxxClass, class Enable=void>
class DummyBaseMinorCPUShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyBaseMinorCPUShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const BaseMinorCPUParams &>>>
{
  public:
    using Params = BaseMinorCPUParams;
    static gem5::MinorCPU *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyBaseMinorCPUShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const BaseMinorCPUParams &>>>
{
  public:
    using Params = DummyBaseMinorCPUParamsClass;
    static gem5::MinorCPU *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::MinorCPU *
DummyBaseMinorCPUShunt<gem5::MinorCPU>::Params::create() const
{
    return DummyBaseMinorCPUShunt<gem5::MinorCPU>::create(*this);
}

} // namespace gem5
