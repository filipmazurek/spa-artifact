/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/QoSMemSinkCtrl.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/qos/mem_sink.hh"

#include "mem/qos/mem_sink.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_QoSMemSinkCtrl");
    py::class_<QoSMemSinkCtrlParams, QoSMemCtrlParams, std::unique_ptr<QoSMemSinkCtrlParams, py::nodelete>>(m, "QoSMemSinkCtrlParams")
        .def(py::init<>())
        .def("create", &QoSMemSinkCtrlParams::create)
        .def_readwrite("interface", &QoSMemSinkCtrlParams::interface)
        .def_readwrite("memory_packet_size", &QoSMemSinkCtrlParams::memory_packet_size)
        .def_readwrite("read_buffer_size", &QoSMemSinkCtrlParams::read_buffer_size)
        .def_readwrite("request_latency", &QoSMemSinkCtrlParams::request_latency)
        .def_readwrite("response_latency", &QoSMemSinkCtrlParams::response_latency)
        .def_readwrite("write_buffer_size", &QoSMemSinkCtrlParams::write_buffer_size)
        .def_readwrite("port_port_connection_count", &QoSMemSinkCtrlParams::port_port_connection_count)
        ;

    py::class_<gem5::memory::qos::MemSinkCtrl, gem5::memory::qos::MemCtrl, std::unique_ptr<gem5::memory::qos::MemSinkCtrl, py::nodelete>>(m, "gem5_COLONS_memory_COLONS_qos_COLONS_MemSinkCtrl")
        ;

}

static EmbeddedPyBind embed_obj("QoSMemSinkCtrl", module_init, "QoSMemCtrl");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyQoSMemSinkCtrlParamsClass
{
  public:
    gem5::memory::qos::MemSinkCtrl *create() const;
};

template <class CxxClass, class Enable=void>
class DummyQoSMemSinkCtrlShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyQoSMemSinkCtrlShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const QoSMemSinkCtrlParams &>>>
{
  public:
    using Params = QoSMemSinkCtrlParams;
    static gem5::memory::qos::MemSinkCtrl *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyQoSMemSinkCtrlShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const QoSMemSinkCtrlParams &>>>
{
  public:
    using Params = DummyQoSMemSinkCtrlParamsClass;
    static gem5::memory::qos::MemSinkCtrl *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::memory::qos::MemSinkCtrl *
DummyQoSMemSinkCtrlShunt<gem5::memory::qos::MemSinkCtrl>::Params::create() const
{
    return DummyQoSMemSinkCtrlShunt<gem5::memory::qos::MemSinkCtrl>::create(*this);
}

} // namespace gem5
