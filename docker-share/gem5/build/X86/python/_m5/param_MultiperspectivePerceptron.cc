/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/MultiperspectivePerceptron.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/pred/multiperspective_perceptron.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_MultiperspectivePerceptron");
    py::class_<MultiperspectivePerceptronParams, BranchPredictorParams, std::unique_ptr<MultiperspectivePerceptronParams, py::nodelete>>(m, "MultiperspectivePerceptronParams")
        .def_readwrite("bias0", &MultiperspectivePerceptronParams::bias0)
        .def_readwrite("bias1", &MultiperspectivePerceptronParams::bias1)
        .def_readwrite("biasmostly0", &MultiperspectivePerceptronParams::biasmostly0)
        .def_readwrite("biasmostly1", &MultiperspectivePerceptronParams::biasmostly1)
        .def_readwrite("block_size", &MultiperspectivePerceptronParams::block_size)
        .def_readwrite("budgetbits", &MultiperspectivePerceptronParams::budgetbits)
        .def_readwrite("decay", &MultiperspectivePerceptronParams::decay)
        .def_readwrite("extra_rounds", &MultiperspectivePerceptronParams::extra_rounds)
        .def_readwrite("fudge", &MultiperspectivePerceptronParams::fudge)
        .def_readwrite("hash_taken", &MultiperspectivePerceptronParams::hash_taken)
        .def_readwrite("hshift", &MultiperspectivePerceptronParams::hshift)
        .def_readwrite("ignore_path_size", &MultiperspectivePerceptronParams::ignore_path_size)
        .def_readwrite("imli_mask1", &MultiperspectivePerceptronParams::imli_mask1)
        .def_readwrite("imli_mask4", &MultiperspectivePerceptronParams::imli_mask4)
        .def_readwrite("initial_ghist_length", &MultiperspectivePerceptronParams::initial_ghist_length)
        .def_readwrite("initial_theta", &MultiperspectivePerceptronParams::initial_theta)
        .def_readwrite("local_history_length", &MultiperspectivePerceptronParams::local_history_length)
        .def_readwrite("n_sign_bits", &MultiperspectivePerceptronParams::n_sign_bits)
        .def_readwrite("nbest", &MultiperspectivePerceptronParams::nbest)
        .def_readwrite("num_filter_entries", &MultiperspectivePerceptronParams::num_filter_entries)
        .def_readwrite("num_local_histories", &MultiperspectivePerceptronParams::num_local_histories)
        .def_readwrite("pcbit", &MultiperspectivePerceptronParams::pcbit)
        .def_readwrite("pcshift", &MultiperspectivePerceptronParams::pcshift)
        .def_readwrite("recencypos_mask", &MultiperspectivePerceptronParams::recencypos_mask)
        .def_readwrite("record_mask", &MultiperspectivePerceptronParams::record_mask)
        .def_readwrite("speculative_update", &MultiperspectivePerceptronParams::speculative_update)
        .def_readwrite("speed", &MultiperspectivePerceptronParams::speed)
        .def_readwrite("threshold", &MultiperspectivePerceptronParams::threshold)
        .def_readwrite("tunebits", &MultiperspectivePerceptronParams::tunebits)
        .def_readwrite("tuneonly", &MultiperspectivePerceptronParams::tuneonly)
        ;

    py::class_<gem5::branch_prediction::MultiperspectivePerceptron, gem5::branch_prediction::BPredUnit, std::unique_ptr<gem5::branch_prediction::MultiperspectivePerceptron, py::nodelete>>(m, "gem5_COLONS_branch_prediction_COLONS_MultiperspectivePerceptron")
        ;

}

static EmbeddedPyBind embed_obj("MultiperspectivePerceptron", module_init, "BranchPredictor");

} // namespace gem5
