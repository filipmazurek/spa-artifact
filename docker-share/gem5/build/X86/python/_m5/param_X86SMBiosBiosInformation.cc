/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/X86SMBiosBiosInformation.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "arch/x86/bios/smbios.hh"

#include <vector>
#include "enums/ExtCharacteristic.hh"
#include <vector>
#include "enums/Characteristic.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include <string>
#include "base/types.hh"
#include "base/types.hh"
#include <string>
#include <string>
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_X86SMBiosBiosInformation");
    py::class_<X86SMBiosBiosInformationParams, X86SMBiosSMBiosStructureParams, std::unique_ptr<X86SMBiosBiosInformationParams, py::nodelete>>(m, "X86SMBiosBiosInformationParams")
        .def(py::init<>())
        .def("create", &X86SMBiosBiosInformationParams::create)
        .def_readwrite("characteristic_ext_bytes", &X86SMBiosBiosInformationParams::characteristic_ext_bytes)
        .def_readwrite("characteristics", &X86SMBiosBiosInformationParams::characteristics)
        .def_readwrite("emb_cont_firmware_major", &X86SMBiosBiosInformationParams::emb_cont_firmware_major)
        .def_readwrite("emb_cont_firmware_minor", &X86SMBiosBiosInformationParams::emb_cont_firmware_minor)
        .def_readwrite("major", &X86SMBiosBiosInformationParams::major)
        .def_readwrite("minor", &X86SMBiosBiosInformationParams::minor)
        .def_readwrite("release_date", &X86SMBiosBiosInformationParams::release_date)
        .def_readwrite("rom_size", &X86SMBiosBiosInformationParams::rom_size)
        .def_readwrite("starting_addr_segment", &X86SMBiosBiosInformationParams::starting_addr_segment)
        .def_readwrite("vendor", &X86SMBiosBiosInformationParams::vendor)
        .def_readwrite("version", &X86SMBiosBiosInformationParams::version)
        ;

    py::class_<gem5::X86ISA::smbios::BiosInformation, gem5::X86ISA::smbios::SMBiosStructure, std::unique_ptr<gem5::X86ISA::smbios::BiosInformation, py::nodelete>>(m, "gem5_COLONS_X86ISA_COLONS_smbios_COLONS_BiosInformation")
        ;

}

static EmbeddedPyBind embed_obj("X86SMBiosBiosInformation", module_init, "X86SMBiosSMBiosStructure");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyX86SMBiosBiosInformationParamsClass
{
  public:
    gem5::X86ISA::smbios::BiosInformation *create() const;
};

template <class CxxClass, class Enable=void>
class DummyX86SMBiosBiosInformationShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyX86SMBiosBiosInformationShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const X86SMBiosBiosInformationParams &>>>
{
  public:
    using Params = X86SMBiosBiosInformationParams;
    static gem5::X86ISA::smbios::BiosInformation *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyX86SMBiosBiosInformationShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const X86SMBiosBiosInformationParams &>>>
{
  public:
    using Params = DummyX86SMBiosBiosInformationParamsClass;
    static gem5::X86ISA::smbios::BiosInformation *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::X86ISA::smbios::BiosInformation *
DummyX86SMBiosBiosInformationShunt<gem5::X86ISA::smbios::BiosInformation>::Params::create() const
{
    return DummyX86SMBiosBiosInformationShunt<gem5::X86ISA::smbios::BiosInformation>::create(*this);
}

} // namespace gem5
