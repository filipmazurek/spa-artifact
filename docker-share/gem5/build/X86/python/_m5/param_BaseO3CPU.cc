/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BaseO3CPU.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/o3/dyn_inst.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "cpu/pred/bpred_unit.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "cpu/o3/fu_pool.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "enums/CommitPolicy.hh"
#include "enums/SMTFetchPolicy.hh"
#include "enums/SMTQueuePolicy.hh"
#include "base/types.hh"
#include "enums/SMTQueuePolicy.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "enums/SMTQueuePolicy.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BaseO3CPU");
    py::class_<BaseO3CPUParams, BaseCPUParams, std::unique_ptr<BaseO3CPUParams, py::nodelete>>(m, "BaseO3CPUParams")
        .def(py::init<>())
        .def("create", &BaseO3CPUParams::create)
        .def_readwrite("LFSTSize", &BaseO3CPUParams::LFSTSize)
        .def_readwrite("LQEntries", &BaseO3CPUParams::LQEntries)
        .def_readwrite("LSQCheckLoads", &BaseO3CPUParams::LSQCheckLoads)
        .def_readwrite("LSQDepCheckShift", &BaseO3CPUParams::LSQDepCheckShift)
        .def_readwrite("SQEntries", &BaseO3CPUParams::SQEntries)
        .def_readwrite("SSITSize", &BaseO3CPUParams::SSITSize)
        .def_readwrite("activity", &BaseO3CPUParams::activity)
        .def_readwrite("backComSize", &BaseO3CPUParams::backComSize)
        .def_readwrite("branchPred", &BaseO3CPUParams::branchPred)
        .def_readwrite("cacheLoadPorts", &BaseO3CPUParams::cacheLoadPorts)
        .def_readwrite("cacheStorePorts", &BaseO3CPUParams::cacheStorePorts)
        .def_readwrite("commitToDecodeDelay", &BaseO3CPUParams::commitToDecodeDelay)
        .def_readwrite("commitToFetchDelay", &BaseO3CPUParams::commitToFetchDelay)
        .def_readwrite("commitToIEWDelay", &BaseO3CPUParams::commitToIEWDelay)
        .def_readwrite("commitToRenameDelay", &BaseO3CPUParams::commitToRenameDelay)
        .def_readwrite("commitWidth", &BaseO3CPUParams::commitWidth)
        .def_readwrite("decodeToFetchDelay", &BaseO3CPUParams::decodeToFetchDelay)
        .def_readwrite("decodeToRenameDelay", &BaseO3CPUParams::decodeToRenameDelay)
        .def_readwrite("decodeWidth", &BaseO3CPUParams::decodeWidth)
        .def_readwrite("dispatchWidth", &BaseO3CPUParams::dispatchWidth)
        .def_readwrite("fetchBufferSize", &BaseO3CPUParams::fetchBufferSize)
        .def_readwrite("fetchQueueSize", &BaseO3CPUParams::fetchQueueSize)
        .def_readwrite("fetchToDecodeDelay", &BaseO3CPUParams::fetchToDecodeDelay)
        .def_readwrite("fetchTrapLatency", &BaseO3CPUParams::fetchTrapLatency)
        .def_readwrite("fetchWidth", &BaseO3CPUParams::fetchWidth)
        .def_readwrite("forwardComSize", &BaseO3CPUParams::forwardComSize)
        .def_readwrite("fuPool", &BaseO3CPUParams::fuPool)
        .def_readwrite("iewToCommitDelay", &BaseO3CPUParams::iewToCommitDelay)
        .def_readwrite("iewToDecodeDelay", &BaseO3CPUParams::iewToDecodeDelay)
        .def_readwrite("iewToFetchDelay", &BaseO3CPUParams::iewToFetchDelay)
        .def_readwrite("iewToRenameDelay", &BaseO3CPUParams::iewToRenameDelay)
        .def_readwrite("issueToExecuteDelay", &BaseO3CPUParams::issueToExecuteDelay)
        .def_readwrite("issueWidth", &BaseO3CPUParams::issueWidth)
        .def_readwrite("needsTSO", &BaseO3CPUParams::needsTSO)
        .def_readwrite("numIQEntries", &BaseO3CPUParams::numIQEntries)
        .def_readwrite("numPhysCCRegs", &BaseO3CPUParams::numPhysCCRegs)
        .def_readwrite("numPhysFloatRegs", &BaseO3CPUParams::numPhysFloatRegs)
        .def_readwrite("numPhysIntRegs", &BaseO3CPUParams::numPhysIntRegs)
        .def_readwrite("numPhysVecPredRegs", &BaseO3CPUParams::numPhysVecPredRegs)
        .def_readwrite("numPhysVecRegs", &BaseO3CPUParams::numPhysVecRegs)
        .def_readwrite("numROBEntries", &BaseO3CPUParams::numROBEntries)
        .def_readwrite("numRobs", &BaseO3CPUParams::numRobs)
        .def_readwrite("renameToDecodeDelay", &BaseO3CPUParams::renameToDecodeDelay)
        .def_readwrite("renameToFetchDelay", &BaseO3CPUParams::renameToFetchDelay)
        .def_readwrite("renameToIEWDelay", &BaseO3CPUParams::renameToIEWDelay)
        .def_readwrite("renameToROBDelay", &BaseO3CPUParams::renameToROBDelay)
        .def_readwrite("renameWidth", &BaseO3CPUParams::renameWidth)
        .def_readwrite("smtCommitPolicy", &BaseO3CPUParams::smtCommitPolicy)
        .def_readwrite("smtFetchPolicy", &BaseO3CPUParams::smtFetchPolicy)
        .def_readwrite("smtIQPolicy", &BaseO3CPUParams::smtIQPolicy)
        .def_readwrite("smtIQThreshold", &BaseO3CPUParams::smtIQThreshold)
        .def_readwrite("smtLSQPolicy", &BaseO3CPUParams::smtLSQPolicy)
        .def_readwrite("smtLSQThreshold", &BaseO3CPUParams::smtLSQThreshold)
        .def_readwrite("smtNumFetchingThreads", &BaseO3CPUParams::smtNumFetchingThreads)
        .def_readwrite("smtROBPolicy", &BaseO3CPUParams::smtROBPolicy)
        .def_readwrite("smtROBThreshold", &BaseO3CPUParams::smtROBThreshold)
        .def_readwrite("squashWidth", &BaseO3CPUParams::squashWidth)
        .def_readwrite("store_set_clear_period", &BaseO3CPUParams::store_set_clear_period)
        .def_readwrite("trapLatency", &BaseO3CPUParams::trapLatency)
        .def_readwrite("wbWidth", &BaseO3CPUParams::wbWidth)
        ;

    py::class_<gem5::o3::CPU, gem5::BaseCPU, std::unique_ptr<gem5::o3::CPU, py::nodelete>>(m, "gem5_COLONS_o3_COLONS_CPU")
        ;

}

static EmbeddedPyBind embed_obj("BaseO3CPU", module_init, "BaseCPU");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyBaseO3CPUParamsClass
{
  public:
    gem5::o3::CPU *create() const;
};

template <class CxxClass, class Enable=void>
class DummyBaseO3CPUShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyBaseO3CPUShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const BaseO3CPUParams &>>>
{
  public:
    using Params = BaseO3CPUParams;
    static gem5::o3::CPU *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyBaseO3CPUShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const BaseO3CPUParams &>>>
{
  public:
    using Params = DummyBaseO3CPUParamsClass;
    static gem5::o3::CPU *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::o3::CPU *
DummyBaseO3CPUShunt<gem5::o3::CPU>::Params::create() const
{
    return DummyBaseO3CPUShunt<gem5::o3::CPU>::create(*this);
}

} // namespace gem5
