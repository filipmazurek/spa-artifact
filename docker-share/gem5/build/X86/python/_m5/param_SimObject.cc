/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/SimObject.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "sim/sim_object.hh"

#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_SimObject");
    py::class_<SimObjectParams, std::unique_ptr<SimObjectParams, py::nodelete>>(m, "SimObjectParams")
        .def_readwrite("name", &SimObjectParams::name)
        .def_readwrite("eventq_index", &SimObjectParams::eventq_index)
        ;

    py::class_<gem5::SimObject, Drainable, Serializable, statistics::Group, std::unique_ptr<gem5::SimObject, py::nodelete>>(m, "gem5_COLONS_SimObject")
        .def("init", &gem5::SimObject::init)
        .def("initState", &gem5::SimObject::initState)
        .def("memInvalidate", &gem5::SimObject::memInvalidate)
        .def("memWriteback", &gem5::SimObject::memWriteback)
        .def("regProbePoints", &gem5::SimObject::regProbePoints)
        .def("regProbeListeners", &gem5::SimObject::regProbeListeners)
        .def("startup", &gem5::SimObject::startup)
        .def("loadState", &gem5::SimObject::loadState, py::arg("cp"))
        .def("getPort", &gem5::SimObject::getPort, pybind11::return_value_policy::reference, py::arg("if_name"), py::arg("idx"))
        ;

}

static EmbeddedPyBind embed_obj("SimObject", module_init, "");

} // namespace gem5
