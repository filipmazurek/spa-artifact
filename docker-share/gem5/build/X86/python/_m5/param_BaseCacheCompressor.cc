/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BaseCacheCompressor.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/cache/compressors/base.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BaseCacheCompressor");
    py::class_<BaseCacheCompressorParams, SimObjectParams, std::unique_ptr<BaseCacheCompressorParams, py::nodelete>>(m, "BaseCacheCompressorParams")
        .def_readwrite("block_size", &BaseCacheCompressorParams::block_size)
        .def_readwrite("chunk_size_bits", &BaseCacheCompressorParams::chunk_size_bits)
        .def_readwrite("comp_chunks_per_cycle", &BaseCacheCompressorParams::comp_chunks_per_cycle)
        .def_readwrite("comp_extra_latency", &BaseCacheCompressorParams::comp_extra_latency)
        .def_readwrite("decomp_chunks_per_cycle", &BaseCacheCompressorParams::decomp_chunks_per_cycle)
        .def_readwrite("decomp_extra_latency", &BaseCacheCompressorParams::decomp_extra_latency)
        .def_readwrite("size_threshold_percentage", &BaseCacheCompressorParams::size_threshold_percentage)
        ;

    py::class_<gem5::compression::Base, gem5::SimObject, std::unique_ptr<gem5::compression::Base, py::nodelete>>(m, "gem5_COLONS_compression_COLONS_Base")
        ;

}

static EmbeddedPyBind embed_obj("BaseCacheCompressor", module_init, "SimObject");

} // namespace gem5
