/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BloomFilterBase.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "base/filters/base.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BloomFilterBase");
    py::class_<BloomFilterBaseParams, SimObjectParams, std::unique_ptr<BloomFilterBaseParams, py::nodelete>>(m, "BloomFilterBaseParams")
        .def_readwrite("num_bits", &BloomFilterBaseParams::num_bits)
        .def_readwrite("offset_bits", &BloomFilterBaseParams::offset_bits)
        .def_readwrite("size", &BloomFilterBaseParams::size)
        .def_readwrite("threshold", &BloomFilterBaseParams::threshold)
        ;

    py::class_<gem5::bloom_filter::Base, gem5::SimObject, std::unique_ptr<gem5::bloom_filter::Base, py::nodelete>>(m, "gem5_COLONS_bloom_filter_COLONS_Base")
        ;

}

static EmbeddedPyBind embed_obj("BloomFilterBase", module_init, "SimObject");

} // namespace gem5
