/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/System.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "sim/system.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "enums/MemoryMode.hh"
#include <vector>
#include "base/types.hh"
#include "base/addr_range.hh"
#include <vector>
#include "mem/abstract_mem.hh"
#include "base/types.hh"
#include <string>
#include <vector>
#include "sim/redirect_path.hh"
#include <vector>
#include "base/types.hh"
#include "base/addr_range.hh"
#include <string>
#include <string>
#include <vector>
#include "sim/sim_object.hh"
#include "sim/power/thermal_model.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "sim/workload.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_System");
    py::class_<SystemParams, SimObjectParams, std::unique_ptr<SystemParams, py::nodelete>>(m, "SystemParams")
        .def(py::init<>())
        .def("create", &SystemParams::create)
        .def_readwrite("auto_unlink_shared_backstore", &SystemParams::auto_unlink_shared_backstore)
        .def_readwrite("cache_line_size", &SystemParams::cache_line_size)
        .def_readwrite("exit_on_work_items", &SystemParams::exit_on_work_items)
        .def_readwrite("init_param", &SystemParams::init_param)
        .def_readwrite("m5ops_base", &SystemParams::m5ops_base)
        .def_readwrite("mem_mode", &SystemParams::mem_mode)
        .def_readwrite("mem_ranges", &SystemParams::mem_ranges)
        .def_readwrite("memories", &SystemParams::memories)
        .def_readwrite("mmap_using_noreserve", &SystemParams::mmap_using_noreserve)
        .def_readwrite("multi_thread", &SystemParams::multi_thread)
        .def_readwrite("num_work_ids", &SystemParams::num_work_ids)
        .def_readwrite("readfile", &SystemParams::readfile)
        .def_readwrite("redirect_paths", &SystemParams::redirect_paths)
        .def_readwrite("shadow_rom_ranges", &SystemParams::shadow_rom_ranges)
        .def_readwrite("shared_backstore", &SystemParams::shared_backstore)
        .def_readwrite("symbolfile", &SystemParams::symbolfile)
        .def_readwrite("thermal_components", &SystemParams::thermal_components)
        .def_readwrite("thermal_model", &SystemParams::thermal_model)
        .def_readwrite("work_begin_ckpt_count", &SystemParams::work_begin_ckpt_count)
        .def_readwrite("work_begin_cpu_id_exit", &SystemParams::work_begin_cpu_id_exit)
        .def_readwrite("work_begin_exit_count", &SystemParams::work_begin_exit_count)
        .def_readwrite("work_cpus_ckpt_count", &SystemParams::work_cpus_ckpt_count)
        .def_readwrite("work_end_ckpt_count", &SystemParams::work_end_ckpt_count)
        .def_readwrite("work_end_exit_count", &SystemParams::work_end_exit_count)
        .def_readwrite("work_item_id", &SystemParams::work_item_id)
        .def_readwrite("workload", &SystemParams::workload)
        .def_readwrite("port_system_port_connection_count", &SystemParams::port_system_port_connection_count)
        ;

    py::class_<gem5::System, gem5::SimObject, std::unique_ptr<gem5::System, py::nodelete>>(m, "gem5_COLONS_System")
        .def("getMemoryMode", &gem5::System::getMemoryMode)
        .def("setMemoryMode", &gem5::System::setMemoryMode)
        ;

}

static EmbeddedPyBind embed_obj("System", module_init, "SimObject");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummySystemParamsClass
{
  public:
    gem5::System *create() const;
};

template <class CxxClass, class Enable=void>
class DummySystemShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummySystemShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const SystemParams &>>>
{
  public:
    using Params = SystemParams;
    static gem5::System *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummySystemShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const SystemParams &>>>
{
  public:
    using Params = DummySystemParamsClass;
    static gem5::System *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::System *
DummySystemShunt<gem5::System>::Params::create() const
{
    return DummySystemShunt<gem5::System>::create(*this);
}

} // namespace gem5
