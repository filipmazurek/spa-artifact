/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/IntelTrace.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/inteltrace.hh"

namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_IntelTrace");
    py::class_<IntelTraceParams, InstTracerParams, std::unique_ptr<IntelTraceParams, py::nodelete>>(m, "IntelTraceParams")
        .def(py::init<>())
        .def("create", &IntelTraceParams::create)
        ;

    py::class_<gem5::trace::IntelTrace, gem5::trace::InstTracer, std::unique_ptr<gem5::trace::IntelTrace, py::nodelete>>(m, "gem5_COLONS_trace_COLONS_IntelTrace")
        ;

}

static EmbeddedPyBind embed_obj("IntelTrace", module_init, "InstTracer");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyIntelTraceParamsClass
{
  public:
    gem5::trace::IntelTrace *create() const;
};

template <class CxxClass, class Enable=void>
class DummyIntelTraceShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyIntelTraceShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const IntelTraceParams &>>>
{
  public:
    using Params = IntelTraceParams;
    static gem5::trace::IntelTrace *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyIntelTraceShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const IntelTraceParams &>>>
{
  public:
    using Params = DummyIntelTraceParamsClass;
    static gem5::trace::IntelTrace *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::trace::IntelTrace *
DummyIntelTraceShunt<gem5::trace::IntelTrace>::Params::create() const
{
    return DummyIntelTraceShunt<gem5::trace::IntelTrace>::create(*this);
}

} // namespace gem5
