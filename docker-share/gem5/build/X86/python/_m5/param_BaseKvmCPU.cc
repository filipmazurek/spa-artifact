/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BaseKvmCPU.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/kvm/base.hh"

#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BaseKvmCPU");
    py::class_<BaseKvmCPUParams, BaseCPUParams, std::unique_ptr<BaseKvmCPUParams, py::nodelete>>(m, "BaseKvmCPUParams")
        .def_readwrite("alwaysSyncTC", &BaseKvmCPUParams::alwaysSyncTC)
        .def_readwrite("hostFactor", &BaseKvmCPUParams::hostFactor)
        .def_readwrite("hostFreq", &BaseKvmCPUParams::hostFreq)
        .def_readwrite("useCoalescedMMIO", &BaseKvmCPUParams::useCoalescedMMIO)
        .def_readwrite("usePerfOverflow", &BaseKvmCPUParams::usePerfOverflow)
        ;

    py::class_<gem5::BaseKvmCPU, gem5::BaseCPU, std::unique_ptr<gem5::BaseKvmCPU, py::nodelete>>(m, "gem5_COLONS_BaseKvmCPU")
        .def("dump", &gem5::BaseKvmCPU::dump)
        ;

}

static EmbeddedPyBind embed_obj("BaseKvmCPU", module_init, "BaseCPU");

} // namespace gem5
