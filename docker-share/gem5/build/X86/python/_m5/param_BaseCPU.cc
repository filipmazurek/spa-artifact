/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BaseCPU.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/base.hh"

#include "cpu/base.hh"
#include "base/types.hh"
#include <vector>
#include "arch/generic/decoder.hh"
#include "base/types.hh"
#include <vector>
#include "arch/generic/interrupts.hh"
#include <vector>
#include "arch/generic/isa.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "arch/generic/mmu.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include <vector>
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "sim/system.hh"
#include "sim/insttracer.hh"
#include <vector>
#include "sim/process.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BaseCPU");
    py::class_<BaseCPUParams, ClockedObjectParams, std::unique_ptr<BaseCPUParams, py::nodelete>>(m, "BaseCPUParams")
        .def_readwrite("checker", &BaseCPUParams::checker)
        .def_readwrite("cpu_id", &BaseCPUParams::cpu_id)
        .def_readwrite("decoder", &BaseCPUParams::decoder)
        .def_readwrite("do_checkpoint_insts", &BaseCPUParams::do_checkpoint_insts)
        .def_readwrite("do_statistics_insts", &BaseCPUParams::do_statistics_insts)
        .def_readwrite("function_trace", &BaseCPUParams::function_trace)
        .def_readwrite("function_trace_start", &BaseCPUParams::function_trace_start)
        .def_readwrite("interrupts", &BaseCPUParams::interrupts)
        .def_readwrite("isa", &BaseCPUParams::isa)
        .def_readwrite("max_insts_all_threads", &BaseCPUParams::max_insts_all_threads)
        .def_readwrite("max_insts_any_thread", &BaseCPUParams::max_insts_any_thread)
        .def_readwrite("mmu", &BaseCPUParams::mmu)
        .def_readwrite("numThreads", &BaseCPUParams::numThreads)
        .def_readwrite("power_gating_on_idle", &BaseCPUParams::power_gating_on_idle)
        .def_readwrite("progress_interval", &BaseCPUParams::progress_interval)
        .def_readwrite("pwr_gating_latency", &BaseCPUParams::pwr_gating_latency)
        .def_readwrite("simpoint_start_insts", &BaseCPUParams::simpoint_start_insts)
        .def_readwrite("socket_id", &BaseCPUParams::socket_id)
        .def_readwrite("switched_out", &BaseCPUParams::switched_out)
        .def_readwrite("syscallRetryLatency", &BaseCPUParams::syscallRetryLatency)
        .def_readwrite("system", &BaseCPUParams::system)
        .def_readwrite("tracer", &BaseCPUParams::tracer)
        .def_readwrite("workload", &BaseCPUParams::workload)
        .def_readwrite("port_icache_port_connection_count", &BaseCPUParams::port_icache_port_connection_count)
        .def_readwrite("port_dcache_port_connection_count", &BaseCPUParams::port_dcache_port_connection_count)
        ;

    py::class_<gem5::BaseCPU, gem5::ClockedObject, std::unique_ptr<gem5::BaseCPU, py::nodelete>>(m, "gem5_COLONS_BaseCPU")
        .def("switchOut", &gem5::BaseCPU::switchOut)
        .def("takeOverFrom", &gem5::BaseCPU::takeOverFrom)
        .def("switchedOut", &gem5::BaseCPU::switchedOut)
        .def("flushTLBs", &gem5::BaseCPU::flushTLBs)
        .def("totalInsts", &gem5::BaseCPU::totalInsts)
        .def("scheduleInstStop", &gem5::BaseCPU::scheduleInstStop)
        .def("getCurrentInstCount", &gem5::BaseCPU::getCurrentInstCount)
        .def("scheduleSimpointsInstStop", &gem5::BaseCPU::scheduleSimpointsInstStop)
        .def("scheduleInstStopAnyThread", &gem5::BaseCPU::scheduleInstStopAnyThread)
        ;

}

static EmbeddedPyBind embed_obj("BaseCPU", module_init, "ClockedObject");

} // namespace gem5
