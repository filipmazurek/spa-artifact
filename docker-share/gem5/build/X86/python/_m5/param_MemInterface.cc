/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/MemInterface.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/mem_interface.hh"

#include "enums/AddrMap.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_MemInterface");
    py::class_<MemInterfaceParams, AbstractMemoryParams, std::unique_ptr<MemInterfaceParams, py::nodelete>>(m, "MemInterfaceParams")
        .def_readwrite("addr_mapping", &MemInterfaceParams::addr_mapping)
        .def_readwrite("banks_per_rank", &MemInterfaceParams::banks_per_rank)
        .def_readwrite("burst_length", &MemInterfaceParams::burst_length)
        .def_readwrite("device_bus_width", &MemInterfaceParams::device_bus_width)
        .def_readwrite("device_rowbuffer_size", &MemInterfaceParams::device_rowbuffer_size)
        .def_readwrite("device_size", &MemInterfaceParams::device_size)
        .def_readwrite("devices_per_rank", &MemInterfaceParams::devices_per_rank)
        .def_readwrite("ranks_per_channel", &MemInterfaceParams::ranks_per_channel)
        .def_readwrite("read_buffer_size", &MemInterfaceParams::read_buffer_size)
        .def_readwrite("tBURST", &MemInterfaceParams::tBURST)
        .def_readwrite("tCK", &MemInterfaceParams::tCK)
        .def_readwrite("tCS", &MemInterfaceParams::tCS)
        .def_readwrite("tRTW", &MemInterfaceParams::tRTW)
        .def_readwrite("tWTR", &MemInterfaceParams::tWTR)
        .def_readwrite("write_buffer_size", &MemInterfaceParams::write_buffer_size)
        ;

    py::class_<gem5::memory::MemInterface, gem5::memory::AbstractMemory, std::unique_ptr<gem5::memory::MemInterface, py::nodelete>>(m, "gem5_COLONS_memory_COLONS_MemInterface")
        ;

}

static EmbeddedPyBind embed_obj("MemInterface", module_init, "AbstractMemory");

} // namespace gem5
